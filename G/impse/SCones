# Flanges!!

me.SCones = &acgt{ return [
    # vast oldness, Peace
    ... me&ruv ,
    # W etc relatives
    ... me&Sch_Comm ,
    ... me&Sch_Pavings ,
    ... me&Sch_Constel ,
    ... me&Sch_ema ,
]};
me.Yingmind ||= [];

=pod reintroduce MindInto
 GONE are %ting, %tracting, %Gracto, %folder
 
 Know/*%Pave gently, a %Zave that doesnt expect here
 
  me&bal fills R%Ying/$step%ball%etc from the schema
    or %ball%eph for floating steps, not in Rc&s
 %Ying
  < s&J see 'resolve through JRom'
    Ying gets to Rom:$p many times,
      since %elvoids back into $p may happen now
      < depending on the attention span of A:planet
        which should only spend 1/3 of its time
        in ~200ms bursts, to keep interactive
      < not looping
    not different enough to Ying sleeping the non-elvised
    would be nice for slomo elvising,
     getting the controls on an A
 
 %KnowThee (the schema)
  is eventually a pin, full of S-teps
   which %Peace manages dispatch to
  s/$u/:u/, for highlighting
   
  S not
  # never got to, yet S may be defined:
  S o Know/**$u o Ghost/$n/$u o Run/**$n
  #  would create a %twin on a Ghost,
  #  where the u converts to of/t when $u comes along,
  #   all the way from $W:
  S i To/$W o Run/**$n
  #  $W are down/up from Run, push/pull:
  push may:input $W=C? maybe extra $u as well...
  pull:
    $u towards $n...Ghost...Know
    $W itself,
     may CB_load Lines dige, pass test
     it might have the rolling Wy&A:n situation
      of a $W in A.4
    $W.*,
     lv, code, etc.
   all that might be drawn out,
    dige checked for lazy downloading tests
  
  S 3
  S o Run/**$n%%acty:3
  # means any $n %%may,acty:3
  #  o ...%%acty known to auto %%may,acty
  
  # when n%%acty,may (engages):
  #  engage any %%may,acty<=3 on $n
  #   as in switching everything on
  #  engage $n's relations in Know, Ghost, To
  #   to acty:2?
  #   will upgrade if eg Know/** source needs reading
  #  the link to To, etc, producing %%may:input
  
  # all before iterating the $n here,
  #  before it transmits to To
  
  # maybe the step numbers auto %%acty clause
  S 6
  S i To/$W o Run/**$n
  me&Yong,$W,'To',...
  # clarifies how to input to To,
  #  makes it require %%acty=6,
  #  starts the simulation there,
  #  which should get init with some attention,
  #  and travelly situata
  # and we're near the terminal again...
  S 67
  while waiting for To, at regular intervals
  S 7
  accept, pull
  hoisting $u back to ...
  producing channels of matter from these points
  eg $u, $ch, 
  
  < %%acty row not ending in may$
    should engage the may,
    as long as its not ^may
  
  may,be,{},acty:3
    brack may click on,
     introducing %%acty:3,may to ja
  may,acty,acty:3,{}
   the may:acty method an open-pressure interpreter
    reading %%acty-ish from around,
    auto engaging up to 3 if any cause (inc click on)
  
  < io: optimise for Knowy&tw[u.t], %%tw
  < io: pipelines, listen for new Run/**
  
%Paving ############
  inheriting %Pave-ish sc, like %Pave
  < deduce impliables at &adhere or &CB_load
  receiving %Live-ish sc from %Pave
  them all,
  < gathers itself, finds j%trouble, makes %openey
    trouble got means ->Ghost->Travel->To and back
  < &settle
 %Pave net connect a thing
  inheriting %Pave-ish sc
    Know%directory=else/ward:
     Know/**$t are else/ward/$t
    < That%directory=ForThe/That implied by That%J
     < $t%director implies $t/**%directory += $t
  < producing %Live-ish sc (to %Paving)
 
  %Search for %species (is in the $t)
   < local %Search host,
  < _ting c&ready -> Qup the first time !?
    < comeback to %waits etc
  
 %Ying
   < logs/maps/rules elvising going in
    < so $r can be paused
  adhere generally
  < %Pavings want attending into Travel
    defaulting to mixing the W I as per %J
  < elvis itself the steps wanting to wake up
    start that paused, lets travel loose
  < code folder, fix Zif diff squish
 %twmt
   recycle tw ha
 %twin
  might be the pairing of musictime and imagespace,
   to get alignment and interactivity in the show
  < nodeo %%may and %%waits
  
  < To
   %Search
    who implements the index where of=* mix into definition
  < make .5 ghost from @Search, into .5/of/t%dige
    < dupish so two different %directory things etc,
    then %twin uses those .5/.../* sc being linked
      being linked because:
        .5 becomes known (el=1)
        have Run something (el=2)
     or the s.sc already in the link
     to figure which Know/** we want
      %twmt has compiled {tw,s,candidates for Qc}
      %Pavings ein helps to:
       creating a type folder if dup with conflicting Qc
  
  < get KnowThee doing something
   brackdowns and noDisplay ing:
   
  < %Crun mapping Peace:5 etcs,
    anything interesting on them (SCA, waits)
     similar gear might org travels
      expecting+introgressing
    fishfood, pause, savepoints?
    being an elvis queue <-> machines of load

=cut
me.Sch_Comm = &acgt{ return [
  // the room
    ['Abodo',0.7,&acgtRs{
        delete s&bgi;
    },'ift,D'],
    ['Peace',0.7,&acgtRs{
        #s&hue ||= 30;
    },'ift,D'],
    ['noisemaking',0.6,&acgtRs{
         me&ha,R,{waitel:2,p:py&l};
         me&ha,R,{dwitty:'vael',flat:'others',vap:2}
         me&ha,R,{dwitty:'val',until:'seemingly'}
         # sa (waighre) asks
         $lo = me&sa,R,'vap','dwitty,flat,until';
         me&nu,"vap3",lo
         
         # loop:
         $lo = me&sa,R,'cow',1 [0] || 2;
         lo++
         me&ha,R,{cow:lo};
         
         me&ha,R,{dwitty:'vael',until:'seemingly',vap:3}
    },'ift,D'],
  
  // SummerCat
   // SummerCat
    # < a process similar to Travel itself,
    #   acty:3 saving a W
    ['SummerCat',0.297,&acgtRs{
        me&reaw,R,'SummerCat';
        $S = me&inode,R;
        !S and return me&waits,'node'
        $testmode = 0 ? '' : ',testmode'
        me&bal,'Inc','Aearch,eph'
        if (0) {
            me&bal,'Yusears','Yuse,eph,testmode'
            me&bal,'Jpara','Jpara,eph,testmode'
        }
        else {
            #me&bal,'Jhost','Jhost,eph'
            me&bal,'Jproto','Jproto,eph'
            me&bal,'Jrunto','Jrunto,eph'
        }
    },'ift,D'],
    ['sleeping+SummerCat',0.2971,&acgtRs{
        me&rollbs,R,'Inn'
    },'ift,D'],
    
    # W prepares to happen
    ['Jhost',0.299,&acgtRs{
        $S = me&inode,R;
        $client = me.cbu(R,'SummerCat');
        !client and throw "!client"
        me&reaw,R,'Jhost,eph';
        $Yuaving = 'Paving:W,fully,openey,Yuaving';
        me&bal,client.t,Yuaving
        # < Know just w%dige,
        #   Ghost has arrays of args to precompile?
        #    or do we want to block read whenever we need something?
        #    since it is arranged to be near
        # w%dige is always as /ghost/ is,
        #  yet wc&s is compiled + args
        $balwjs = &ta{
            isar(t) and $ot = t.join('-'); t = t[0]
            $j = me&bal,ot||t,Yuaving;
            js&title = t;
            js&Paving = 'wjs';
            js&args = a;
            return j
        }
        balwjs('SCones','ar,me')
        balwjs([client.t,'w'],'J,s')
        balwjs([client.t,'w2'],'J,s,wodges')
        if (0) {
            # < Search of:w el:9 seems loopy
            #   we can assume all wjs no way now?
            $j = balwjs('w3','J,t,wodges');
            js&Paving = 'w';
            js&brackstable_aware = 1;
        }
    },'ift,D'],
    &{
        # settle all previous siblings
        # for 3 &settle 2,1, for lack of:
        # < settle deeply, 3 &settle 2 &settle 1
        me.settle_prev = &acgtR{
            $N = me&ioty,Ry&up,'ball';
            $ri = N.indexOf(R);
            ri < 0 and throw "upz%ball"
            $prev = N.slice(0,ri);
            !prev.length and return
            
            me&settle,R,prev and return 1
            Rs&settled = prev;
            Rs&brackstable_aware = 1;
        }
    },
   // Jproto
    # W as planned by Matu
    ['Jproto',0.299,&acgtRs{
        me&reaw,R,'Jproto,eph';
        $S = me&inode,R;
        $client = me.cbu(R,'SummerCat');
        !client and throw "!client"
        
        # %Jhost prepares &t
        me&settle_prev,R and return
        # of things going into it
        Rs&settled.map(&j{
            me&ioty,j,'Paving' .map(&r{
                $Live = rs&Live;
                $Q = rs&Question;
                $q = {Q,dome:'things'};
                Live and q.Live = Live; q.dige = Qs&dige
                me&ha,R,q
            })
        });
        # click act
        $ro = &k{ return me&rolltog,R,{k,once:1} }
        # t = $dome(,pe:el,e:d), c = {}|C
        # < peel here to keep word order of this call
        $ha = &tc{ me&ha,R,c,{},'dome:'+t }
        
        
        
        # dome tires, need push
        #Rs&icount > 4 && !ro('~') and return
        # J.4 forgets, redoing without
        ro('4') and me&rolled,R,'four'
        $four = me&rollbsc,R,'four';
        
        
        # < previous thinking as %term'd into runs
        me&zaa,R,'dome:plans,plan,to,C' .map(&n{
            # n may be forgot due to errors
            ha('plans',n)
        }) .length ||
            ha('plans,plan:1',{to:four, C:Cye([client.t])})
        
        # < S 1 @plans
        me&dome_S,R,'plans','1';
        
        # < pull next bit of time
        # < Babz &ja:'plan to' &n{
        #   key order, implied map
        me&jaa,R,'dome:plans,plan,to,C' .map(&n{
            $c = ns&C;
            !cy&A and ha('todo,plan:'+ns&plan)
        });
        
        me&dome_S,R,'todo','2';
        # < &stay, when ^ domes immute v
        
        # < io plan(?^@todo) to C
        #   little joins not in the main plumb
        #   and relating to brack
        $D = me&jaa,R,'dome:todo,plan' [0]
        D && me&jaa,R,{dome:'plans',plan:Ds&plan,to:1,C:1}
            .map(&t{ ha('now',t) })
        
        $E = me&jaa,R,'dome:now'
        #D && me&jaa,R,{plan:Ds&plan,to:1,C:1};
        
        me&Rsc,R,'^^Inn' .t != 'Inc' and throw "lost Inc"
    },'ift,D'],
    
   // Jrunto
    # W as done by A:n (T loaded)
    ['Jrunto',0.31,&acgtRs{
        me&reaw,R,'Jrunto,eph';
        $S = me&inode,R;
        
        # %Jproto prepares run
        me&settle_prev,R and return
        
        $p = Rs&Proto = me&ioty,Rs&settled,'','Jproto' [0];
        !p and return me&waits,"Nop"
        
        !ps&wou and me&tsc,"Nowou"
        me&zaa,p,'dome:now' .map(&E{
            $c = Es&C;
            $to = Es&to;
            
            $Y = me&Yong,R,c,'n',{to},9 .y.Y;
            
            try {
            }
            catch (err) {
                $er = err
            }
            me&nu,'C',c
            me&nu,'to',to
            er and me&nu,'er',er .sc.hue = 160;
        })
        # < into Y:n
        me&nu,R
        
        if (me&rolltog,R,{k:'T',once:1}) {
            me&ha,R,"bump";
        }
    },'ift,D'],
    
   // Yingbal
    ['Yingbal',0.32,&acgtRs{
        me&reaw,R,'Yingbal,adhere,eph';
        ah(R,'adhere','Yingbal',1);
        (Rs&boost || 0) > 0 and me&nu,sy&Y
        $Y = sy&Y;
        !Y and return me&tsc,"!Y",'','p'
        me&tsc,"Yt",Y.t,'p' .sc.fs = 7
        
        sy&R and return
        #$S = me&inode,R;
    },'ift,D'],
    &{
    # things to appear as ball
    # < uniquely bal anything Yong'd 01 return cv==3
    me.Yingbal = &acgttsc{
        # s must have a Y
        $Y = sy&Y;
        !Y and throw "notinit"
        # so we can climb up to an R
        
        $r = me.cby(s,&s{ return sy&R || sy&bal })[0]
        # first sy&R over sy&bal(!&inode
        ry&bal && ry&R and r = ry&R
        # may be for an r = &bal since
        ry&bal and r = ry&bal
        r = me&yfuture,r; // ry&R
        R = r;
        $C = Rs&C;
        Cy&R == R
        
        isst(c) and c = G&peel,c
        c ||= {};
        c = ex({eph:1,Yingbal:1},c)
        
        #t[0] == 'J' and debugger
        #~>4 The: R.t, t, s.t
        $r = me&bal,t,s,c;
        sy&bal = r
        me&Ring,R,{und:r,ov:0.299};
        return r
    }
    
   // n 1
        me.Yingmind.n = &acgt{ return [
        # s = C
        # < many C in one n, implied layer of doming
        ['ground',0.01,&acgtRYs,SC{
            sy&R = R;
            Ys&leamity = 3;
            if (sc&W) {
                $to = Ys&to;
                !to and throw "!to"
                sc&J = me&fiu,to,s.t;
            }
            if (sc&J) {
                $J = Y.1 = sc&J;
                # < want Jhost t&w:J.t
            }
            if (sc&e) {
                $e = sc&e;
                # < see if any dome:e contain e Asip,
                #   or any along e cby, where it has been
                
            }
        },'ift,D'],
        # ghost suction
        ['realise',0.2,&acgtRYs,SC{
            if (sc&J) {
                # < Jy&Y
                me&Yingbal,'J:'+s.t,s
            }
        },'ift,D'],
   
   // n 5
        # atom -> atoms
        ['tick',0.5,&acgtRYs,SC{
            ss&icountre ||= 0;
            ss&icountre ++;
            #throw "Les"
            $C = s;
            s = Cc&s;
            T.nN = [];
            # A=Y must serve G&t for A.I, have 4s&globals
            Y.6 = Y.4 = A.4;
            Y.7 = A.5;
            
            $D = Ys&Doming = me&Yingdome,R,Y,C;
            
            $Aye = A;
            A = Y;
            1s&N = [];
            
            if (c&J) {
                ~>4 intheway: C.t
                
                me&way,R,C.t,{J:A.1,s}
            }
            
            A = Aye;
            
            Dy&ending()
            
            # < magic
            
            # if this has a diff it can takeover a branch
            $t = Ys&osc = me&Yingosc,R,C,D;
            ts&top and 1s&top = t
        },'ift,D'],
    ]};
   
   // &Yingdome
    # for an A+C having S
    # ie the whole attention span
    me.Yingdome = &acgtRYs{
        $D = me&Yong,R,s,'Doming',{},1;
        me&Yingbal,'%Doming',D
        
        $current;
        # for an S+ay
        Dy&dome = &tc{
            isst(c) and c = G&peel,c
            c ||= {};
            c.t = t;
            return current = me&Yong,R,D,'Dome',c,1
        }
        # or on either end of them,
        # before the first S:
        Dy&dome('beginning','light');
        # after the last: %light vanishes if empty
        Dy&ending = &{
            Dy&domed(Dy&dome('ending','light'))
            me&Yong,R,D,{},2;
        }
        
        Yc&Srupto = &acgtst,talk,params{
            ~Srupt: s, ':', t, '%', talk
            
            # whatever is over now:
            Dy&domed();
            # various minds:
            A&Sonly && num(s) && s != A&Sonly and return 0
            A&ioing and return A&ioing.next()
            # vaguely named:
            t ||= s;
            # to happen once:
            A&doings ||= {};
            $l = A&doings[t] ||= {};
            if (l.done) {
                l.done < 2 and Dy&domed()
                l.done = 2
                return
            }
            l.done = 1;
            Dy&dome(t);
            ~sttalk: ki([s,t,talk,params]);
            return 1;
        };
        
        # grounds adopted from recent: n ...
        Dy&domed = &{
            !current and return
            $N = me&ydome;
            me&Yong,R,current,{N},2;
            current = null
        };
        return D
    };
    # Section deciver
    me.Yingmind.Doming = &acgt{ return [
        # C
        ['ground',0.01,&acgtRYs,SC{
            return Cye([s.t,3])
        },'ift,D'],
    ]};
    # piece of things
    me.Yingmind.Dome = &acgt{ return [
        # C
        ['ground',0.01,&acgtRYs,SC{
            $t = Ys&t;
            !t and throw "!t"
            $z = me&fiu,s,t
            return z
        },'ift,D'],
        ['ground',0.13,&acgtRYs,SC{
            each in Ys&N {
                ac(s,'z',n)
            }
            Ys&light && !ss&z.length and me&fiu,sy&up,s,9
        },'ift,D'],
    ]};
   
   // &Yingosc
    me.Yingosc = &acgtRsD{
        $s = me&Yong,R,s,'osc',{D:D},7;
        me&Yingbal,'%osc',s
        return s
    }
    me.Yingmind.osc = &acgt{ return [
        # C
        ['osc',0.01,&acgtRYs,SC{
            return Cye([s.t,3])
        },'ift,D'],
        
        ['ing',0.5,&acgtRYs,SC{
            $Doming = Ys&D;
            each i,Dome Domings&z {
                each in Domes&z {
                    $dup = me&fiu,s,n.t,8
                    dup and ac(s,'dups',dup)
                    $O = Cye(n);
                    Oy&n = n;
                    me&fiu,s,O
                }
            }
            Yc&M = ss&z;
        },'ift,D'],
        
        ['sea',0.6,&acgtRYs,SC{
            #~>4 sea: Y.t, s.t
            $C = s;
            c&s and s&strinoge = c&s.split("\n").length
            
            # %of travel to W:of for encoding!
            $swims = ['of']
            each ik swims {
                # < ha,Y,eto:W,t:s&of,W:of
                #   W routing to Jproto,
                C.sc[k] and ah(Y,['swims'],k,C.sc[k],s)
                # many per J
                $J = s&J;
                if (J) {
                    $z = Js&top || Js&z || [];
                    me&ioty,z .map(&n{
                        nc&W == k and ah(Y,['swims',k,C.sc[k],n])
                    })
                }
            }

        },'ift,D'],
        
        ['voyage',0.62,&acgtRYs,SC{
            !Ys&swims and return
            
            # < making swum (via J) not travel for enlightenment
            each ktN Ys&swims {
                t == 1 and t = 'i'
                # Y%of=Y:voy, whole bunch of elvising
                $E = Y.sc[k] ||= me&Yingvoy,R,s,'swim',k
                me&Yong,R,E,'swim',{t,N},1;
                # to each thing
            }}
            
            # < tug
            each in Ys&swim {
                me&Yong,R,n,{},7;
            }
            
        },'ift,D,self'],
        
        ['selfs',0.7,&acgtRYs,SC{
            ss&top = s
        },'ift,D,self'],
        
    ]};
   
   // &Yingvoy - osc elvis leaving!
    # < make a variant of Yingdome, for loading eg swim
    me.Yingvoy = &acgtRstk{
        $s = me&Yong,R,s,'voy',{k},1;
        me&Yingbal,'Y:voy:'+t+':'+k,s
        return s
    }
    me.Yingmind.voy = &acgt{ return [
        # elvis stilling out
        # < C.t == null should throw
        ['elvoy',0.01,&acgtRYs,SC{
            !Ys&k and throw "nok"
            $U = sy&Y;
            !U and throw "nestY"
            $z = Cye([Ys&k,3]);
            ac(U,'swim',z)
            return z
        },'ift,D'],
        ['elvoy',0.13,&acgtRYs,SC{
            # picture each t:Wof
            Yc&M = ss&z;
        },'ift,D'],
        ['elvoy',0.2,&acgtRYs,SC{
            sc&W = Ys&k;
            sy&cv = 0.001;
        },'ift,D'],
        ['elvoy',0.21,&acgtRYs,SC{
            me&Yong,R,s,{},7;
        },'ift,D'],
        ['elvoy',0.23,&acgtRYs,SC{
            # they all %%string
            sy&toLines and throw "hadLines"
            sy&toLines = me&indo,s (&s,d{ return sy&toLines });
            # this now a c&W to elvis, slept by %string
            me&Zeve,R,s
            # < incorporate that
            # < brackstable refs if they have a %dige in the row?
            #ss&string = s
            
            # < vague sharable slep, Copy Lines, lv
        },'ift,D,self'],
    ] };
    me.Yingmind.swim = &acgt{ return [
        ['elvoys',0.01,&acgtRYs,SC{
            # < exp lang
            $t = Ys&t;
            !t and throw "!t"
            $z = me&fiu,s,t
            $N = Ys&N;
            !N and throw "!N"
            Yc&M = N;
            return z
        },'ift,D'],
        ['elvoys',0.2,&acgtRYs,SC{
            $p = Ys&returns;
            !pc&W and throw "What"
            # may have Lines already, see 'variant of Yingdome'
            (sc&W ? ss&z : [s]).map(&n{
                $dup = me&fiu,s,n.t,8
                #dup and ac(s,'dups',dup)
                dup && dupy&cv != ny&cv and throw "cv"
                
                # < clone deeply
                $K = Cye(n);
                Ky&O = n;
                Ky&Y = Y;
                # may mix from $W/*
                s != n and Ky&W = s
                
                me&fiu,p,K
            })
        },'ift,D'],
        ['elvoys',0.21,&acgtRYs,SC{
            tvsortz(ss&z);
            Yc&M = [s,...ss&z];
        },'ift,D,self'],
        ['K',0.22,&acgtRYs,SC{
            # encoding advice
            $d = {jsony:1}
            me&Lineso,s,d;
        },'ift,D,self'],
    ] };
    me.Lineso = &acgtsd{
        return me&indo,s,d (&s,d{
            $Y = sy&Y;
            $part;
            try {
                part = 'scan';
                !isC(s) and throw "Not C"
                sc&N and throw "mightbe R"
                part = 'clone';
                $D = Cye(s);
                part = 'comp';
                # comp && comp(R,D);
                #R.c.not and return
                part = 'Compress';
                G&Compress,D;
                Y && Ys&compLines and Ys&compLines(D,d)
                Ds&M and Ds&M = []
                part = 'toLines';
                d.toLines = d.jsony ? enj(D) : G&toLines,D;
                Ds&H && !d.toLines.match(/(H):(\w+)\b/) and throw "%H not so gc will see it"
            }
            catch (er) {
                ~enLinesR: ki(d,2)+"   !"+part+"! "+er
                me&Rec,R,'err';
                d.toLines = "[error} "+ki(s);
                #Rs&err = "enLinesR: "+part+": "+er;
                #n err  $s:Rs&err
                d.nofurther = 1
            }
            sy&toLines = d.toLines;
            return d.toLines
        })
    }
   // &Zeve Jproto
    me.Zeve = &acgtRs{
        $p = me&Rsc,R,'^^Proto';
        # the question inc e=s
        $q = {}
        sy&timese ||= 0;
        sy&timese++;
        
        sy&toLines and q.dige = dig(sy&toLines)
        # < should turn into?
        $a = {}
        # {D:1};
        # this Dome...
        q.dome = "J:"+R.t
        return me&nodee,R,p,s,a,q
        # sy&toLines 
    }
    
   // notoph - previous %of
    $notoph = &{ return [
    ['selfer','2',&acgtRs{
        $h = Rc&N[0];
        $Swim = hs&Swim ||= {};
        
        s = Rs&selfer;
        $I = Swim[ss&oph] ||= {};
        $z = I[s.t] ||= [];
        s.y.cv ||= 0.1;
        # only cv sorts
        me&sortin,z,s;
        $zi = z.indexOf(s);
        if (zi-1 >= 0) {
            $ot = z[zi-1];
            if (ot.y.cv == s.y.cv) {
                Rs&overwrites = ot;
                z.splice(zi-1,1);
                me&tsc,'overwrites','<'+ot.t;
            }
        }
        Rs&selfed = 1;
        # there is also an %other for things coming via a J
        # self would always overwrite 
    },'ift,D'],
    ['Swim','3',&acgtRs{
        s&mb = 2;
        $D = G&Cye,[R.t,''];
        each fc Rs&Swim {
            $F = G&Cye,[f,{cv:0.001},{W:R.t}];
            ac(D,'z',F);
            each tz c {
                each in z {
                    ac(F,'z',n);
                }
            }
        }
        Rs&Swimb = me&Copy,R,D,{Lines:3} .c.s;
    },'ift,D'],
    ['Swimb','4',&acgtRs{
        $S = Rs&Swimb;
        me&rollbs,R,'indige';
        Rs&indige && Rs&indige == Ss&dige and me&rollbs,R,'Swum'
        if (!Rs&Swum) {
            Rs&indige = Ss&dige;
            
            # < send S to the server
            # it will W=oph and encode all this stuff
            $f = Ss&z[0].sc.z[0];
            fc&s += "\nstamp";
            
            Rs&Swum = S;
        }
        # attach to the 9
        $p = Ry&up;
        ps&task != 'C' and throw "lst"
        $s = pc&s;
        each iF Ss&z {
            $F = G&Cye,F;
            $N = delete Fs&z;
            each iD N {
                i $s/$F/$D
            }
        }
    },'ift,D'],
    ]};
    
   },
    
    
   // testmode for SummerCat|brackstable 
    ['brackstable_aware',0.33,&acgtRs{
        me&reaw,R,'brackstable_aware';
        $is = me&ollbs,R,'brackstable'
        !is and return
        $d = me&tsc,'brackstable-lives','=='+is,'y'
        dy&cv = 0.298
        me.nto(R,d,&{
            # forwards attention downstream, as if a fresh &settle
            $se = sy&settled
            ses&bump = 1
        })
    },'ift,D'],
    ['Jpara',0.299,&acgtRs{
        Rs&brackstable_aware = 1;
        me&reaw,R,'Jpara';
        $S = me&inode,R;
        # things to &settle before J thinks
        $N = Ry&up.sc.z.filter(r => r != R && rs&ball);
        #N.map(n => me&nu,nc&s )
        Rs&brackstable_aware = 1;
        me&settle,R,N and return ~>3 unsettled!:
        Rs&settled = N;
        ~>3 settled:
    },'ift,D'],
    ['Jpara',0.2999,&acgtRs{
        me&jaa,R,'bumping' .map(&n{
            ~>4 peraps: haks(n.sc).join(",")
        })
    },'ift,D'],
    ['testmode',0.2991,&acgtRs{
        me&reaw,R,'testmode';
    },'ift,D'],
    ['Jpara+settled+testmode',0.2995,&acgtRs{
        $M = [];
        $N = Rs&settled;
        N.map(&r{
            me&ioty,r .map(&r{
                if (rs&bumping) {
                    ~>4 seebumps: r.t, rs&bumping
                    # < the %%viar is missing from &brackology display,
                    #   but always present in &jaa selection below:
                    me&ha,R,{viar:rc&s,bumping:rs&bumping,dome:'clings'}
                }
            })
        })
        N.map(r => M.push( ... me&ioty,r,'Paving' ) )
        me&ha,R,{isalive:1};
        M.map(r => me&ha,R,{hasathing:r.t,dome:'things'} )
        me&nu,"Brzin",M
    },'ift,D'],
    ['Yuse',0.299,&acgtRs{
        Rs&brackstable_aware = 1;
        $S = me&inode,R;
        me&reaw,R,'Yuse';
        $Yuaving = 'Paving:W,fully,openey,Yuaving';
        me&bal,'Fields',Yuaving
        me&bal,'Delirium',Yuaving
        Rs&testmode &&
            me&bal,'Delfium','Yuaving,decoy'
    },'ift,D'],
    ['Yuaving+decoy',0.47,&acgtRs{
        Rs&brackstable_aware = 1;
        me&reaw,R,'Yuaving,decoy';
        me&rollbs,R,'bumping',3;
        if (me&rolltog,R,{k:'Trub',once:1}) {
            me&ha,R,"bump";
            Rs&bumping++
        }
        me&ha,R,{blumps:Rs&bumping}
    },'ift,D'],
   
   // < W.5|Ghost prepares the ghost
    
    ['Yuaving',0.46,&acgtRs{
        $S = me&inode,R;
        me&reaw,R,'Yuaving';
        Rs&decoy and return
        $Q;
        each tr Rs&Zaving {
            Q = rs&Q;
        }
        !Q and return me&waits,'!Q'
        $w = Qc&s;
        Rs&Question = Q;
        !w and return
        Rs&Live = w;
    },'ift,D'],
   // @Aearch
    ['sleeping+Aearch','4',&acgtRs{
        # they still know the R that set them
        me&rollbs,R,'do_permanence,_ting';
    },'ift,D'],
    ['Aearch','298',&acgtRs{
        me&reaw,R,'Aearch,_ting';
        $S = me&inode,R;
        !S and return me&waits,'node'
        $For = Ry&up;
        Fors&Inn = Rs&Inn = R;
        #me&reaw,For,'Inn';
        $Search = 4s&Pearch;
        $upting = Rs&upting = Searchs&_ting;
        !upting and throw "^^Inn!_ting", Search

        
        me&introqua,[R,'Ghost'],{boost:-1},'@1';
        $Ghost = me&bal,'Ghost','childy,eph' .c.s;
        
        # what are spaces for:
        # things we look up
        me&fiu,Ghost,'In';
        # things we make up
        me&fiu,Ghost,'Out';
        
        # Ghost/$what:In|Out/ $of(/$args)? /$P
        $whatP = &what,P{
            what = me&fiu,Ghost,what;
            $of = me&fiu,what,Pc&of;
            Pc&args and of = me&fiu,of,Pc&args
            return of
        };
        
        $Pio = Rs&Pio = {};
        Pio.what = &tP{
            $of = whatP(t,P);
            return me&fiu,of,P.t,8
        };
        Pio.not = &tP{
            $of = whatP(t,P);
            me&fiu,of,P.t,9
        };
        Pio.is = &tP{
            $of = whatP(t,P);
            me&fiu,of,P.t,9
            me&fiu,of,P
        };
        Rs&_ting = &Qr{
            return me&Aearch_ting,R,Q,r
        }
        
    },'ift,D'],
    &{
        #c _ting - a many arg'd entrypoint
        #  ting becomes the reduce for io's map
        # 
        me.Aearch_ting = &acgtRQr{
            !isC(Q) and throw "ting !C"
            
            if (Qs&string) {
                $q = Rs&Pio.what('Out',Q);
                q ||= Cye(Q);
                Rs&Pio.is('Out',q);
                q.sc = {};
                qs&string = delete Qs&string;
                qs&dige = dig(qs&string)
                return
            }
            
            $s = Rs&upting(Q,r);
            $P = Qs&P;
            !P and ~>5 upting!P: Q.t
            !P and return
            Rs&Pio.is('In',P);
            $q = Rs&Pio.what('Out',Q);
            q and throw "reading a write", Q, q
            !s and return
            return s
        }
    },
    
    
  // Glimpes Textl
    ['Glimpes',0.32,&acgtRs{
        me&reaw,R,'Yinghost,cm';
        $w = me&t,R,'ghost','Yingmas-light';
        #$w = me&t,R,'ghost','Dome';
        !w and return me&waits,'t...'
        me&rollbs,R,'Yinghost';
        me&rolltog,R,{maydo:'reset-w'} and delete Rs&Yinghost;
        $z = Rs&Yinghost ||= Cye(w);
        zs&dige != ws&dige and z = Rs&Yinghost = Cye(w);
        
        me&Tie,R,'sayeth',1;
        if (Rs&sayeth != null) {
            zc&s = Rs&sayeth;
        }
        
        $cm_hidden = 0;
        if (1) {
            $t = "ste";
            'always recreate cm' && 1 and t += Rs&icount
            $cm =
            n $t 1 $s:zc&s %e:2
            cm_hidden and cms&dis = 0;
            $cmsc = cms&cm_sc = {hoistcm:R};
            $cm = me&rollbs,R,'cm';
            !cm and me&waits,'cm...'
        }
        # %chunksfold does it
        if (0) {
            cmsc.chunksfold = 1;
            return;
        }
        
        # or with guts hanging out
        $lines = zc&s.split("\n");
        !zs&chunks and me&chunksoflines,z,lines
        
        cmsc.valuecha = &acgt,cm{
            ~>5 gave value:
            $ope = me&cm_foldmap,cm
            me&cm_foldCode,z,ope,cm;
        };
       // chunks debug
        $ope = cm && me&cm_foldmap,cm || {};
        each is zs&chunks {
            $f = ope[ss&line];
            f and fy&chunk = s
        }
        if (0) {
            each if ope {
                $ch = fy&chunk;
                ch && chs&indent > 10 and continue
                $m = fs&mark;
                $pos = m.find();
                $loc = lines[fs&line];
                
                $g = me&tsc,"fold-on:"+fs&line,0,1
                !ch and me&mtsc,g,"surprise",0,'y'
                else {
                    me&mtsc,g,"loc",0,'y' .c.s = lines[fs&line]
                }
            }
        }
        if (1) {
            # a map, could ...
            $dive;
            me&indo,z,{dl:15} (&sd{
                d.d > 3 and return;
                if (!d.dive) {
                    $v = dive = d.dive = Cye(s);
                    v.t = 'dive';
                    vs&foldiness = ss&size / ss&lines;
                }
                else {
                    s = d.dive = me&fiu,d.dive,Cye(s);
                    sc&s = lines.slice(ss&line,ss&toline+1).join("\n");
                }
            })
            if (dive) {
                delete dives&of;
                n zoap  $s:dive,R %ball,tightly,noDescribe,reneg
            }
        }
    },'ift,D'],
  // Hoosh - /peek/g/j/28* -> G/g/j/*
    # proto how sweetly we shall soon do such:
    # < w:Hoosh, S-ing hierarchy spreading related objects
    #    so our Know %Paving=peek%line=<3/%line=4-4000
    #   Pave is externalised dependency doming
    
    # < 284:Foogla drops '#c %mund = GhoNut'..<'#c ting fance'
    #   joining keepers from Tongingness (%ting) to Domingness
    # < after git reset we should recheck all ting
    ['Hoosh',0.293,&acgtRs{
        $S = me&inode,R;
        me&reaw,R,'Hoosh';
        ah(R,'inheritscif','ball','Hooshin',1)
    },'ift,D'],
    ['Hooshin',0.2907,&acgtRs{
        ah(R,'noadhere','twmt',1)
        ah(R,'inheritscif','ball','Hooshin',1)
        me&reaw,R,'Hooshin,Comvalve,Comvave,Comvalue';
        $p = Ry&up;
        
        # compile side
        ss&Comvave and Rs&Comvave = 1
        else
        ps&Comvave and Rs&Comvalve = 1
        else
        ps&Comvalve and Rs&Comvalue = 1
        else
        if (ss&Lave) {
            $ope = Rs&play || ps&play ||
                me&rolltog,R,{maydo:'+%Lave'};
            !ope and return
            me.adhere.Paving(Ry&up,R);
            Rs&Paving = Rs&Lave = ss&Lave
        }
        else {
            me&tsc,"UNKNOWN"
        }
    },'ift,D'],
   // Comva*
    ['Comvave',0.29071,&acgtRs{
    },'ift,D'],
    ['Comvalve',0.29071,&acgtRs{
        # < make W:g-j
        # for R/r/%Zave=ghost
        # < ss&section=1 should do it, if %Paving...
        Rs&Section = 1;
        me&reaw,R,'Comvalve,Section';
    },'ift,D'],
    # take s from Lave, start saving it here
    ['Comvalue',0.29071,&acgtRs{
        $z = sy&Lave;
        !z and return me&waits,"!sy&Lave"
        $r = zy&R;
        $L = rs&Live;
        !L and return me&waits,'!L'
        !Ls&lines and return me&waits,'!L%lines'
        Rs&Live = L;
        
        $din = me.cbu(R,'Section');
        !din and throw "!section"
        n ghost  $section:din.t,R %Pave:ghost
        
        #me&nu,"From",z;
        #me&nu,"The",L;
        #me&nu,"s",s;
    },'ift,D'],
    # sleep, compile, saving it here
    ['Comvalue',0.6,&acgtRs{
        Rs&waits and return
        $r = Rs&Zaving && Rs&Zaving.ghost;
        !r and return me&waits,'!Zaving.ghost'
        $coms = rs&commitstring;
        !coms and return me&waits,'!coms'
        $Q = rs&Q;
        $L = Rs&Live;
        
        # unindent from yaml $k: |\n(    ...)+
        $lines = Ls&lines;
        #lines = lines.slice(0,130);
        $once = 0;
        each il lines {
            !l || l.substr(0,4) == '    ' and continue
            !once++ and debugger;
        }
        once and return me&waits,"Weirdind"
        $notind = lines.filter(l => l && l.substr(0,4) != '    ');
        notind.length and return me&waits,"!allind>=4" && me&nu,notind
        lines = lines.map(l => l.substr(4));
        
        # drop certain chunks
        $hashc = '#'+'c';
        $deletes = {};
        if (s.t == "Foogla") {
            deletes[hashc+' %mund = GhoNut'] = hashc+' ting fance';
        }
        $delete_til = '';
        lines = lines.filter(&l{
            if (delete_til) {
                !l.includes(delete_til) and return 0
                delete_til = '';
                return 1
            }
            each tn deletes {
                !l.includes(t) and continue
                delete_til = n;
                return 0
            }
            return 1
        });
        
        $z = sy&Lave;
        $m = zs&headline.match(/(# .+)$/);
        (m) and lines.unshift(m[1])
        #me&nu,'z',z;
        
        delete ss&string;
        # DIY diff
        $string = lines.join("\n");
        string.slice(-1)[0] != "\n" and string += "\n"
        
        $W = Qc&s;
        !W && Qc&el != 9 and return me&waits,'!W!el9!?'
        W && !Ws&dige and return me&waits,'!dige'
        W && Ws&dige == dig(string) and return me&tsc,'done'
        coms(string)
    },'ift,D'],
   // Lave
    ['Lave',0.4,&acgtRs{
        me&tsc,"Lave"
        $p = Ry&up;
        #delete Rs&Paving;
        Rs&waits and return me&tsc,"%waits",'','y'
        ss&tabove and sy&tin = pc&s;
    },'ift,D'],
    ['Lave+Live',0.6,&acgtRs{
        $L = Rs&Live;
        Rs&waits and return me&tsc,"%waits",'','y'
        if (Ls&type == 'd') {
            each il Ls&lines {
                $r = me&input,R,l;
                $z = rc&s;
                zs&args = "line:<3";
                zs&Lave = 'peek';
            }
        }
        if (Ls&type == 'f') {
            if (Ls&between) {
                # interpret betweens as items
                $N = me&peek_betweens,L;
                $onlytw = ss&onlytw && G&peel,ss&onlytw;
                $droptw = ss&droptw && G&peel,ss&droptw;
                
                each in N {
                    # < CBing its expected dige
                    onlytw && !onlytw[n.t] and continue
                    droptw && droptw[n.t] and continue
                    ns&shouldige = delete ns&dige;
                    $r = me&input,R,n.t;
                    $z = rc&s;
                    ex(z.sc,n.sc);
                    # will get huge responses, up to filesize limit
                    zs&args = "line:"+ns&line+"-"+ns&toline;
                    zs&Lave = 'peek';
                    # Q.t filename, not the pin, args differntiate them
                    zs&tabove = 1
                }
            }
            else {
                # < into CB|lookaQ
                ss&shouldige && ss&shouldige != Ls&dige
                    && me&tsc,"~dige!";
                
                $more = ss&length > ss&lineto;
                ss&line == 0 and 'start wandering in'
                # < and similar, check lines overlap,
                #   tailing logs read back until we know
                #    probably sensing now before wandering back
                #me&nu,"L",L;
                
                # < doesn't retract %%eto if bailed with %%waits?
                #$q = {tw:s.t,s,L};
                $eto = me.cbu(R,'Hoosh');
                #!eto and return me&waits,"no^Hoosh"
                #Ry&ha(q,{eto});
                # so serve that request from here
                $cr = me&input,eto,'Comvave';
                $cz = crc&s;
                # different to a %Lave
                czs&Comvave = 1;
                $p = Ry&up;
                # < pattern match or set what to name container
                $m = p.t.match(/\b(\w+)\/(\w+)$/);
                !m and return me&waits,"Name-container"
                # so as to not turn up as G/*/$t
                $cot = 'g/'+m[1];
                $cor = me&input,cr,cot;
                $coder = me&input,cor,s.t;
                $cs = coderc&s;
                csy&Lave = s;
            }
        }
        #me&nu,L
    },'ift,D'],
    &{
    me.peek_betweens = &acgtL{
        $N = [];
        $line = 0;
        each il Ls&between {
            if (l) {
                $m = l.match(/^(\d+)x(\w+)$/);
                !m and throw "nonbetween"
                l = Ls&lines[i-1];
                l == null and throw "nonline"
                # < anything. indent, \n\n, strange formations
                $tm = l.match(/^(\S+): \|/);
                !tm and throw "!yaml", l
                $t = tm[1];
                $n = Cye([t,1]);
                # not including the headline
                ns&headline = l;
                line += 1;
                ns&line = line;
                line += +m[1];
                ns&toline = line-1;
                # should yield:
                ns&dige = m[2];
                N.push(n)
            }
            else {
                i != 0 and throw "nobetween", i, l, L
            }
        }
        return N
    }
    },
   
  // Travelty
    ['Travels',0.39,&acgtRs{
        # < wants to cautiously inode while adhere-ing,
        #   to see if we set up:
        Rs&twmt_only = &jz{
            return zs&W || 1
        };
        me&ha,R,"Travels,to:Morrocco";
        return;
        me&ha,R,"Travels,to:everywhere",{R};
        #!me&za,R,'fodder' ? me&ha,R,'fodder,lamp' : me&ha,R,'lamp'
        
        me&ha,R,"Travels,to:everywhere",{R};
        $le = me&zaa,R,"Travels",'to';
        
        $p = sy&p;
        $pat = ss&pat ||= 'ology';
        me&nodei,R,py&r,{pat};
        me&jaa,R,{efrom:py&r.y.s,raga:1} .map(&n{
            le.push(ns&raga)
        })
        
        each in le {
            n = me&tsc,"land",n,'G';
            ns&dis = 1;
            ns&fs = 33;
            
            ns&hue = i*40;
            ns&blr = 9;
        }
        # < switch on and off with %%may:
        #me&waits,"forMOre"
        #throw "as"
    },'ift,D'],
    
    ['Duolish',0.303,&acgtRs{
        me&jaa,R,"efrom,pat" .map(&n{
            $q = {};
            q.raga = ns&pat.split('').join('_');
            me&nodei,R,ns&efrom,q
        })
    },'ift,D'],
]};
me.Sch_Constel = &acgt{ return [
    # hierarchise, do batches of updates 
    # < more than W I mixes
    # < plots intention to travel
    # R%Conal waits for Know|That/...r%Pave+=%fully
    # < set %creatine
  &{
    # permanent act of setting some properties
    #  returns true if unlikely to have taken effect
    # < replace with send-receive ack
    me.Redialsc = &acgtRrc{
        $k = !c ? '' : haks(c).join(',');
        k = 'Redialy'+(k?'-'+k:'');
        # is all there or 404
        $fok = r && (rs&Paving_goodin || rs&creatine);
        !fok and return me&waits,'!fok'
        if (me&sa,R,k ) {
            haks(c).map(k=>r.sc[k] != c[k]) and throw "undialed"
            ha(k)
        }
        else {
            ex(r.sc,c)
            me&ha,R,k;
            return 1
        }
    };
  },
  // Conste 3{
      # code vectoring along C between G
        ['ball+Conste','31',&acgtRs{
            $l = sy&l;
            sy&f = ly&f;
            # if top, have + ignore src f
            #  see unifiers may have ground
            sy&top == s and sy&f = ly&inf
            else {
                # non-top, must use ouf if non-leaf
                sy&f = ly&leaf ? ly&inf : ly&ouf
            }
        },'ift,D'],
        ['ball+Conste','32',&acgtRs{
            T.Mw = 'Conste';
            # from in or out?
            $f = sy&f;
            $Q = fs&Q;
            !Q || !Qs&ready and return me&waits,'!Q'
            me&Redialsc,R,f,{fully:1} and return
            Qc&species == 5 and return me&waits,'Q5'
            
             
  // Conste-ing{
            # only top %Conste compiles
            sy&top != s and return
            
            # o **!%redialy
            #  very in future
            $N = sy&N.map(s => sy&R).filter(&j{
                return !me&sa,R,'Redialy'
            });
            N.length and return ha('waits:them-redialy')
            
            # check out n
            $cha = [];
            $Lives = [];
            each in sy&N {
                $j = ny&R;
                $f = ny&f;
                !f and return me&waits,n.t+"-!f"
                !fs&Live and return me&waits,n.t+"-!f%Live"
                # fs&Live stills
                $was = me&rollbs,j,'Live';
                fs&Live != was and cha.push(cha)
                js&Live = fs&Live;
                # < copy into This/$t/{origin,comp} meanwhile
                #   to externalise to perl to jsbabz it
                #   to apply hacks in waves to it, so differ
                #   to allow processing over many lives
                #    syncing Know/* to resume/complete
                
                # see how the things should mix before hacking?
                #   to reduce the load to:
                # hacking each W as per ...
                # draw attention to hacks on the inside
        
                # any fy&Gc&s.sc.* unknown may be instructions
                # fy&W may have access to:
                # < Search%Mix.W low level tv mixage
                #   should mix %ting=js|W
                #     Ws&I/$of/$C as $W/$of/$C
                #   would be where I needs bootstrapping
                #    from a dozen few-thousand line /js/
                #     to a few dozen thousand line /W/
                #      with some Babzing before it I's too
                #      so we have a bunch of ghost to show for it
                
                # < look in Hacks/$t for compile tricks
            }
            $Lives = me&ioty,R,'Conste'
                .map(j => js&Live);
            Lives.filter(L=>!L).length and return me&ha,R,'waits:them-Live'
            
            me&rollbs,R,'Ready';
            cha.length and delete Rs&Ready
            
            # this mix in the source
            $D = Rs&Live;
            # < don't need it to be there
            !D and return me&waits,"!live"

            $g = me&opeology,"%Ready",{walls:1};
            ac(R,'M',g);
            if (gs&ope) {
                $re = me&opeKm,g,"redo?"
                res&ope and delete Rs&Ready
            }
            
            if (!Rs&Ready) {
                $Ready = Rs&Ready = me&unifydin,D,Lives;
                !Ready and return me&waits,"unifydin.."
                # we can/should attach s&W from Wind
                $Wi = Readyy&Wind || {};
                each kv Wi {
                    fio(Ready,[k,1,{},{W:k,ha:v}]);
                }
                # the osc that knows about this C
                Readyy&s = s;
            }
            $Ready = Rs&Ready;
            
            $c = {};
            c.closish = Rc&brackuiet && !Rc&brackope;
            me&opeuni,g,Ready,Lives,c;
            
            if (gs&ope) {
                me&nu,'Conste',{Ready,Lives}
            }
            
            # back to Conal
            $l = sy&l;
            $r = ly&R;
            me&ha,r,{Ready}
        },'ift,D'],

  // Conal 31
        # the pile of codes moving towards That/**$t
        # before
        #  leaf nodes read Know/**$t, write That/**$t
        #  others (can only mix) from and to That/**$t
        ['ball+Conal','31',&acgtRs{
            # < make these work a bit more varsier
            # Know/**$t
            # 
            $inf = me&supry,s,'yf','yl';
            inf and sy&inf = inf; me&ha,R,{inf}
            
            # That/**$t, if found...
            # That, beyond steps of compilationisms from Comal
            $L = me.cbu(R,'Ying').sc.Lastly;
            L = Ly&R;
            # get sy&fin = That..s
            #  s's mirror in the final A
            # gets sy&ouf to where it will be wanted
            me&supwyth,R,s,'fin',{theys:'l',top:L};
            
            
            $ouf = me&supry,s,'yf','yfin';
            ouf and sy&ouf = ouf; me&ha,R,{ouf}
            # which one...
            #  later tries to include non-leaf src W 
            #   to check it doesn't have grounds...
            #   < may not exist back there,
            #      since Comal grew it
            # < should be able to have grounds,
            #   yet doing this all with J/ping action
            #   rather than mixing compileds would be better
            $leaf = ! me&ioty,sy&l,[''] .length;
            leaf and sy&leaf = 1;
            sy&f = leaf && inf || ouf || inf;
            
            
            ss&coung ||= 0;
            $le = ss&coung++;
        },'ift,D'],

  // Conal 32
        ['ball+Conal','32',&acgtRs{
            T.Mw = 'Conal';
            me&reaw,R,'Conal';
            # < waits for &settle?
            ss&coung <= 1 and return me&waits,"aft-init"
            
            # f ~ref is ok, Comal checks ~Live
            # < test:
            #  to redo work that may depend on it
            #  eg delete rows with dep:yf
            # < wrap ha() with row template
            #   to add such a dependency to each thence
            
            # L=That
            $L = me.cbu(R,'Ying').sc.Lastly;
            L = Ly&R;
            # non-leaf && non-existent That..G
            !sy&leaf && !sy&ouf and me&ha,R,'mot:no-ouf'
            # fs&changey at either That/Know
            $yf = ['inf','ouf'];
            each ik yf {
                $f = s.y [k];
                !f and continue
                fs&changey and me&ha,R,'mot:cha,yf:'+k,{},{f}
            }
            # any mot-ivation
            if (me&ja,R,'mot' ) {
                # excites ups
                $mot = {mot:'char'};
                
                # defers ups until Updated
                #  may be not That/$t-changey by their turn
                !ss&Updated and mot.fro = s
                
                # aplup helps ha to a different node?
                throw "refactor me.aplup"
                #me.aplup(s,&ha,{ me&ha,R,mot });
            }
            
            # ^ goes around, now fro would be:
            $ready = !sy&leaf && me&sa,R,'mot' && !me&sa,R,'fro';
            
            $g = me&opeology,"Conal",{walls:1};
            ac(R,'M',g);
            if (gs&ope) {
                $re = me&opeKm,g,"putready?"
                res&ope and ready = 1
                
                $zu = me&opeKm,g,"zu"
                if (zus&ope) {
                    me&zu,"Comal",s
                }
                
            }
            !sy&leaf && sy&f != sy&ouf and me&mtsc,g,'!oufyet'
            
            #return;
            if (ready) {
                # %SupplyChai finds this, makes into %Conste
                me&ha,R,'ready';
                Rs&suprise_c = {dl:1};
            }
            
  // Conal-ing
            # %Comste returns Ready=[C9 with y&s]
            $Ready = me&sa,R,'Ready',1;
            if (Ready) {
                # find it into That..G
                each in Ready {
                    # W:Something, s)%Comste:
                    $z = ny&s;
                    !isC(z) and throw "no ys"
                    # hop back to s)%Comal:
                    $lz = zy&l;
                    sy&top.y.N.indexOf(lz) < 0 and throw "Nofind zyl",z
                    lz != s and throw "lz nots"
                    
                    # make skinny tree to it, s)%Conal +
                    $stack = me.cby(lz,sy&top);
                    stack[0] != sy&top and throw "stack weird", stack
                    
                    # not suprise
                    $tr = L;
                    each im stack {
                        $r = me&input,tr,m.t;
                        $rs = rc&s;
                        rsy&R = r;
                        my&fin = rs;
                        rsy&l = m; # should persis/compete
                        rs&Thinting = 1;
                        ac(r,'trouble',"Conste-pushish");
                        tr = r;
                    }
                    rs.t != s.t and throw "not our name?",s,'->',r
                    
                    # send ourselves
                    me&ha,R,'Wup',n;
                    #me&nu,"Readzy",r
                    #me&nu,"fropmtop",stack;
                }
                
  // Conal-oung - Wunifyst
                # meanwhile, generate the upload and await push:
                $Wup = me&sa,R,'Wup',1;
                if (Wup) {
                Wup.length > 1 and me&tsc,"manyWups"
                each in Wup {
                    # having G/**s:
                    $ts = sy&fin;
                    $t = tsy&R;
                    $f = tsy&f;
                    me&Redialsc,R,t,{fully:1} and continue
                    
                    # %Comste %Ready -> encoding %Lines .1+5
                    # < cache it with all this sense
                    $st = me&Wunifyst,R,s,n,'clonn';
                    
                    # mark as being in That
                    fs&Wupular = 1
                    
                    # grapple each %Pave
                    $origin = sy&inf;
                    $dest = sy&f;
                    
                    $se = gy&can('m','Diffs');
                    ses&dis = 1;
                    $od = sey&can('m','origin/dest');
                    $vis = ody&ope ? origin : dest;
                    
                    $tw = {};
                    each t,Pave dests&Zaving {
                        $Q = Paves&Q;
                        $De = st;
                        t != 'W' and window.tee = t;
                        if (t == "W\.5") {
                            !sty&fivestring and throw "!5string"
                            De = Cye([Q.t,1,{},{string:sty&fivestring}]);
                        }
                        Dey&Pave = Pave;
                        tw[t] = De;
                    }
                    
                    each t,Pave viss&Zaving {
                        $Q = Paves&Q;
                        $De = st;
                        if (t == "W\.5") {
                            !sty&fivestring and throw "!5string"
                            De = Cye([Q.t,1,{},{string:sty&fivestring}]);
                        }
                        
                        # < attention upgrades to JRom
                        $pa = sey&can('m',t);
                        pas&dis = 1;
                        pas&mah = 30;
                        Qc&el == 9 and me&mtsc,pa,'New!'; continue
                        !pas&ope and continue
                        
                        $c = {t:t,Zif:1};
                        c.got = De;
                        c.exp = Q;
                        $di = me&Ret,R,c;
                        me&zN,di;
                        me&Ring,di,{und:di,ov:314};
                        me&zuct,pa,di;
                        each in dis&waits {
                            ac(R,'waits',n)
                        }
                        Rs&summary = dis&summary;
                    };
                    
                    # put it on disk
                    $go = me&rolltog,R,{maydo:'Push',once:1,tsc:'B'},0;
                    go ||= me&sa,R,{Pushable:sts&dige};
                    if (go) {
                        if (!me&rollbs,R,'sent_string' ) {
                            # Q asks
                            each t,De tw {
                                $Pave = Dey&Pave;
                                ~>3 push: R.t
                                Paves&commitstring(Des&string);
                            }
                            Rs&sent_string = 1;
                        }
                        $Q = dests&Q;
                        if (Qs&string == sts&string) {
                            me&tsc,'pushed';
                            # it cancels the go
                            go = 0
                            # and the grypes
                            delete ges&grypes;
                            # and the changey
                            delete fs&changey;
                            ss&Updated = 1;
                            
                        }
                        else {
                            $pu = me&tsc,'pushing'
                            me.nto(R,pu,&{ 
                                ~>3 repush: R.t
                                delete Rs&sent_string })
                        }
                    }
                    go and me&ha,R,{Pushable:sts&dige}
                    
  // Comalor or when found == + Know cha
                    if (ss&Updated) {
                        if (s == sy&top) {
                            # < all deleted when the top is Updated
                            me&mtsc,g,'Alldone!',0,'p';
                            me&SC_fcommit,R,s;
                        }
                        else {
                            $p = sy&up;
                            $pr = py&R;
                            me&ha,pr,'mot:upd',{},{supr:s}
                            me&ha,R,'Updated'
                            
                            $re = me&opeKm,g,"Up?"
                            res&ope and fs&commiting = 1
                            
                            zu && zus&ope and me&nu,"p",pr
                            

                        }
                    }
                }
                }
            }
            
            ss&count ||= 0;
            $le = ss&count++;
        },'ift,D'],
        ['ball+Thinting','63',&acgtRs{
            sy&R = R;
            
        },'ift,D'],
    &{
    # commit sy&N's f, making Cupload in %ting
    # < me&waits into wai as well,
    #  < modopting into brackdown
    #    as a thumbnail, over the specifics
    #    which could go on joined by ark:waits
    me.SC_fcommit = &acgtRs{
        $fs = [];
        each in sy&N {
            ny&inf and fs.push(ny&inf)
            ny&ouf and fs.push(ny&ouf)
        }
        $waifs = [];
        each if fs {
            fs&commiting ||= 1
            fs&commiting <3 and waifs.push(f)
        }
        if (waifs.length) {
            if (fs.length > waifs.length)
                me&nu,'stillf-commiting',waifs
            return me&waits,"G-commits"
        }
        $c = {maydo:'MindSave',once:1,tsc:'B'};
        $go = me&rolltog,R,c,0;
        !go and return

        $mi = me.cbu(R,'Ying');
        !mi and throw "No ^^%Ying"
        $mg = me.cbu(mi,'Gens');
        !mg and throw "No ^^%Ying^^%Gens"

        each in sy&N {
            delete ns&Updated
        }
        # turn off %MindInto
        me&introqua,mi,{play:0};
        # push/diff
        me&introqua,mg,{boost:1};
        me&tsc,"leaving"
    };
    #c unifydin Swims Things
    # Swim N into fresh D
    #  D is not a dome but the old C
    me.unifydin = &acgtDN{
        # the W:HutKitchen
        $ID = Cye(D);
        IDy&tw = {};

        # unifiers may have ground
        $Dnz = me&ioty,D,['']
            .filter(dW => !dWc&W && !dWs&W);
        if (Dnz.length) {
            # would be updated if we way the W,
            #  rather than plumb it indifferently
            # < find mirrors in We, keep over dup
            #   related to updating only Stylating,
            #     without loading siblings HutKichten/*
            me&zu,"extra_ground",Dnz;
            return
        }
        
        # Swimming things lose a layer of separation
        each id N {
            # have We things
            #  cW puts for a W, are their compiled W:of
            #  sW point to what they unified
            $dWz = me&ioty,d,[''] .filter(dW => dWc&W);
            each i,dW dWz {
                $Wt = dW.t;
                $eyei = 0;
                Wt == 'eye' and Wt = eyei = 'i'
                $IW = IDy&tw[Wt] ||= Cye(dW);
                IW.t = Wt;
                IWy&tv ||= {};
                IWy&cv != dWy&cv and ~>8 cvstrange: ID.t, IW.t
                # the of things are tiny:
                IW.y.cv = 0.001;
                
                ac(ID,'z',IW);

                each i,dt dWs&z {
                    $ty = IWy&tv[dt.t] ||= {};
                    $b = ty[dty&cv];
                    b and ac(IW,'overs',b)
                    b and IWs&z.splice(IWs&z.indexOf(b),1)

                    $It = ty[dty&cv] = Cye(dt);
                    dts&z and me&nu,"of/t/*",dt; return
                    ac(IW,'z',It);

                    # the origin of everything is very important
                    $Wa = dts&Wavel;
                    $l = [d.t];
                    if (Wa) {
                        $Waypin = Wa.split('/');
                        $Waypost = Waypin.pop();
                        Waypin.push(... Waypost.split(','));
                        l.push(... Waypin);
                    }
                    
                    eyei and Its&js = 'i'
                    Its&Wavel = l.join('/');
                }
            }
        }
        
        # Wind: ghostymotion with %ting %Live
        each iW N {
            $P = Wy&P;
            !P and continue
            # is a %ting %Live
            $Wi = IDy&Wind ||= {};
            Wi[W.t] = Ps&dige;
        }
        
        # order, hide %overs -> y&overs
        each i,IW IDs&z {
            IWs&overs and IWy&overs = delete IWs&overs
            tvsortz(IWs&z);
        }
        return ID
    };
    # looks at a compiled W
    me.opeuni = &acgtgDNc{
        $R = Cy&R;
        c ||= {};
        $Dg = me&opeology,c.t||D.t,{walls:1};
        fio(g,Dg);
        c.closish && !Dgs&ope and return Dg
        
        Dgs&dis = 1;

        if (N) {
            # say sources
            # < make %Wind (for .5)
            $Km = me&opeKm,Dg,'src',{};
            each iW N {
                $P = Wy&P;
                if (P) {
                    # is a %ting %Live
                }
                else {
                    me&waits,"!P:"+W.t;
                    me&mtsc,Km,'hasnoP','!P','G'
                }

                $Kn = me&opeKn,Km,W.t,{label:{}};
                Kns&fs = 7;
            }
        }

        each i,IW Ds&z {
            $Km = me&opeKm,Dg,IW.t,{};
            Kms&fs = 12;
            Kms&hue = 160;
            Kms&bri = 1.4;
            Kms&dis = 1;
            #n $IW.t  $s:IW,R %ball,tightly,reneg,refpool

            tvsortz(IWs&z);

            each i,It IWs&z {
                $Kn = me&opeKn,Km,It.t,{label:{}};
                Kns&fs = 7;
                if (Kns&ope) {
                    Kns&fs = 11;
                    Kns&dis = 1;
                    $dis = me&zu,"It",It;
                    me&zuct,Kn,dis
                }
            }
            each in IWy&overs {
                # < tested
                $Kd = Kmy&overs ||= me&opeKm,Dg,'dup';
                $Kn = me&opeKn,Kd,n.t,{label:{}};
                fio(Kn,['from',2,{s:(ns&Wavel||"?")},{fs:7,deco:1}]);
                if (Kns&ope) {
                    Kns&fs = 11;
                    Kns&dis = 1;
                    $dis = me&zu,"It",It;
                    me&zuct,Kn,dis
                }
            }
        }
        return Dg
    };
    # Wunifyst s-cached n-Lines
    me.Wunifyst = &acgtRsnk{
        $st = s.y [k];
        st && st.y [k+'ed'] != n and st = null
        if (!st) {
            st = s.y [k] =
                me&Copy,R,n,{ball:9,Lines:3,ov:8};
            st.y [k+'ed'] = n;
            me&fixstringn,st;
            
            # puts .5 of Wind, now we know our %ha (dige)
            $Wi = ny&Wind
            if (Wi) {
                $fi = G&Cye,[n.t,1];
                fis&ha = sts&dige;
                $sW = fio(fi,'W');
                each kv Wi {
                    fio(sW,[k,1,{},{W:k,ha:v}]);
                }
                $fis = sty&fiver = 
                    me&Copy,R,fi,{ball:9,Lines:3,ov:8};
                sty&fivestring = me&fixstringn,fis;
            }
        }
        return st
    };
    # no trailing \n from Lines?
    # < fix everywhere (entire Storage migration?)
    me.fixstringn = &acgt,st{
        !sts&string and throw "!string"
        sts&string.substr(-1) != "\n" and sts&string += "\n"
        sts&dige = dig(sts&string);
        return sts&string
    };
    },
]};
