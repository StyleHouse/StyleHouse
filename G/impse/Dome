  // brack time
   =alphabet layercake
     join our decisions of how
      into an over-realm, a computed individuals unity
      so decisions that cant be made by anyone
      can be made by that mind
     wording so it applies force around a structure
      the decision being to break or not
     NervOS fibre bundles arm sleepy processes
      limbs becoming available
   
    solves:
    having to state everything, or:
    leaving cos &bready drops state between
      usually youd export the ready state somewhere,
       eg the bunch of C to compile
      such that it can pull changes,
       eg CBing with a Know**%fully turnaround
    by:
      not accepting CBing while busy doing other stuff
      simply not getting around to that &nodeein,
       and not avoiding what it was doing,
        because any confusing/unhandled e
        should usu make a node hang/dev
    
    < %supr-ish list/pile process via me&ind, slepping
       a natural migration pathway, among slopes...
       < know users of the things changing,
    < writing Ghost/**%dige where not Know/**%dige
    
    o1:
      < ha that can think, stream news downstream (z gets read)
      < sa that can log, selection replayable, dome input slep
        to check the conditions for a decision are still so,
         without having to conduce the decision again
      < Babz for each in me&thing { # call me&thing once
      < Babz R&za -> me&za,R (single character == self)
    
    =elvis
  // 1 - physics
   // sahazaja io
        # i - enterer
        # < to react in a Ring,r hang way,
        #   returning/jumping somewhere to think/reapproach
        me.ha = &acgtj{
            return me&bracki,j,js&wou,...[...arguments].slice(5)
        };
        # o - reading,
        # from what is beginning,
        #  what was mid-way,
        #  what got to the end
        #   < without &bready? or just !sleep?
        # ja always now
        me.ja = &acgtj{
            return me&bracko,j,js&wou,...[...arguments].slice(5)
        }
        # sa last time
        me.sa = &acgtj{
            $z = js&wou;
            return me&bracko,j,zy&get_saz(j),...[...arguments].slice(5)
        }
        # za always >7
        me.za = &acgtj{
            $z = js&wou;
            return me&bracko,j,zy&get_zaz(j),...[...arguments].slice(5)
        }
        # and always array
        me.saa = &{ return me.sa(...arguments) || [] }
        me.zaa = &{ return me.za(...arguments) || [] }
        me.jaa = &{ return me.ja(...arguments) || [] }

        # io %wou, a feedback loop
        #   experience -> notion, notion -> etc
        me.sahazaja = &acgtj{
            jy&R and j = jy&R
            # < de-hard-code $k
            $k = 'wou';
            
            # %wou = $z/$row+, via me&ha,j,data etc
            $z = j.sc[k] ||= Cye([k,1,{}]);
            zy&R ||= j;
            
            # %brackwouology = brack opeology
            #  &brackology fills it out at the end
            me&brackope,j,k
            
            # sa last time
            $saz = me&ollbs,j,k
            zy&get_saz = &j{ return saz };
            
            # za always >7
            $zak = k+'_accepted';
            me&rollbs,j,zak;
            me&reaw,j,zak;
            zy&get_zaz = &j{ return j.sc[zak] };
        }
        
        # commit %wou to be za next time
        # usu via Domes_7
        me.node_accept = &acgtRrs{
            rs&wou_accepted = rs&wou
        }
   
   // bracktools
    # display brackology
    me.stepbrack = &acgtjz{
        $g = me&brackology,j,z||'wou';
        me&walls,g,'b:2.2';
        # attaching C to r without doming:
        ac(j,'M',g);
        return g
    }
    # 7ish brackstable determiniser
    #  sees future R as the same, cha=0
    #   otherwise be cha=1 for only objects changing
    # and no in-object differencing, just whats on the rows
    me.brackstabliser = &acgtr,se{
        # compute once
        sey&R == r and return
        sey&R = r;
        # takes brack
        $z = rs&wou;
        ses&z = (zs&z||[]).filter(n => !nc&drop);
        # includes nodes %current below, for &halfsettled
        $froms = sey&settlefroms;
        if (froms) {
            $N = fromss&nodes_below;
            $nb = Cye(['nodes below',1]);
            each in N {
                $nse = ny&settled;
                $la = nse && nses&current;
                !la and debugger
                # duplicatey
                nb.sc[n.t] and nb.sc[n.t+' '+i] = la
                else { nb.sc[n.t] = la }
            }
            ses&z.push(nb)
        }
        # into a progression
        ses&vers ||= [];
        $la = ses&vers.slice(-1)[0];
        if (la) {
            # hack for %%something:$R continuity
            #  sees future R as the same
            # < Display versioning?
            each ir lac&allvs {
                !(r && r.y && ry&R == r) and continue
                $nr = me&yfuture,r;
                lac&allvs[i] = nr || r
            }
        }
        $cha = me&brackstill,r,se,la;
        if (cha) {
            #delete ses&accepted_boring;
            # clone into vers[], drops se/*
            ses&vers.push(Cye(se));
        }
        ses&current = ses&vers.slice(-1)[0];
        return cha
    }
    # transbrack comparator
    # < brackology with two z's, +- 
    me.brackstill = &acgtRzb{
        $cha = 0
        zc&allks = [];
        zc&allvs = [];
        me&ioty,z .map(&n{
            nc&drop and return
            each kv n.sc {
                $ki = zc&allks.push(k)-1;
                # < more/less important k
                !b || bc&allks[ki] != k and cha = 2
                $vi = zc&allvs.push(v)-1;
                if (!b || bc&allvs[vi] != v) {
                    isob(v) and cha ||= 1
                    else { cha = 2 }
                }
            }
        })
        !b || bc&allks.length != zc&allks.length and cha = 2
        return cha
    }
  
   // nodes
        # should we not Doming_7 due to %sleep*
        me.node_issleeping = &acgtRr{
            =elvis &node_issleeping if %sleepung-ish
             potential to really stop mid-r:
             < avoiding any more Ring r**,
                < wants Rc&ip.contains()
               as soon as ha ...waits
                winding them past mind they cant reach,
                 recycling domes of stuff
             < alterior sleeping - when %%waits stops Ring
               does it accept r as b? suppose, to display
                r/** want winding past their whole lives if strange
                 winds to 9...Display while %sleeping?
            =elvis
            # >0 if r is not able to commit (za)
            # >1 if r is not able to display
            R = Ry&R;
            r = ry&R;
            if (rs&sleepung) {
                # displayable after sleepywind
                ~>3 node pung: r.t
                return 1
            }
            elsif (rs&sleeping) {
                # reawakened + tunneled through (Know)
                #~>3 node sleeping: r.t
            } 
            elsif (!Rc&N.includes(r)) {
                # not awakened
                #~>3 node avoid: r.t
            }
            else {
                return 0
            }
            return 2
        }

        # as r/** wake up & want nodesing
        me.inode = &acgtj{
            if (jy&R) {
                # < might be eg Ace to arrive into
                $meant = j;
                j = jy&R;
            }
            $z = jc&s;
            $N = me.cbyb(j,
                &r{ return rs&ball && rc&s.y.N },
                &r{ return rs&Peace == 4 });
            # Ying is not running... eg %R:+Hoosh
            # < A.nodar || throw "nonoder"
            !N and return
            zy&path = N.map(r=>rc&s);
            # make sy&up = ball up
            zy&up ||= N.reverse().slice(1)
                .filter(r => rs&ball).map(r => rc&s)[0];
            $S = zy&path[0];
            $N = Sy&N;
            !N.includes(z) and N.push(z)
            zy&R = j;
            
            # pseudo Nodes init o3
            !js&wou and me&Nodes_o3,j
            
            # Step's R that last o3'd, not sleeping
            !Sy&p and throw "Step !y&p"
            !Sy&R and throw "Step !y&R"
            #T.act and me&ha,j,{noded:T.act}
            return Sy&R
        };
        # node s resolve to a %Ying/(pa/th)
        #  for inter-noding, eg %%settle or %%eto
        # < riding X, hoisting all the way up...
        #  < a/b/-c/d should revoke d's stuff on b, a
        me.tpath = &acgtR,to{
            $jo = toy&R;
            $N = me.cby(jo,&r{
                return rc&s == Rc&s
            });
            N[0].c.s != Rc&s and throw "!^^%Ying"
            N.shift();
            N = N.filter(r => rs&ball);
            !N.length and throw "!tpath"
            return N.map(r => r.t).join('/')
        };
        # < order of Sy&N
        me.nodes_below = &acgts{
            $j = sy&R;
            !j || !sy&path and throw "nodenever"
            $S = sy&path[0];
            $N = Sy&N;
            return N.filter(z => zy&up == s)
        }
   
   // nodelinks
    # concept of leading rows -> sy&${k}tos|froms -> somewhere
    # the (settle|etos)_(6|7|8) exchange
    me.either_ftk = &acgtc{
        !isst(c.k) and throw "give c.k"
        !isar(c.rows) and throw "give c.rows"
        # somethings that become somethingfroms
        $k = c.k;
        k.substr(-1) == 's' and k = k.substr(0,k.length-1)
        c.tk ||= k+'tos';
        c.fk ||= k+'froms';
    }
    # rows leaving $from, grouped by $to
    #  eg sy&settletos/$h:to/$row
    me.either_6 = &acgtRrc{
        me&either_ftk,c;
        $s = rc&s;
        $fromt = me&tpath,R,r;
        # k,tk = settle,settletos | eto,etos
        $ing = s.y[c.tk] ||= Cye([fromt,1]);
        $gone = (ings&z||[]).slice();
        each in c.rows {
            $to = n.sc[c.k];
            !to and throw ""
            # %%eto=1 means to the step
            to == 1 and to = s.y.path[0]
            # select s given p/r/s
            $jo = toy&R;
            to = joc&s;

            $h = fio(ing, me&tpath,R,to );
            hy&up = ing;
            $gi = gone.indexOf(h);
            if (gi >= 0) {
                gone.splice(gi,1);
                # new bunch of rows
                hs&z = [];
            }

            hs&to = to;
            hs&from  = s;
            hs&fromt = fromt;
            ac(h,'z',n);
        }
        # revoke
        gone .map(&h{
            !fio(ing,h.t,0) and throw "notnt"
            if (hc&el != 9) {
                hc&el = 9;
                c.on_el9 and c.on_el9(h);
            }
        });
        c.each and me&ioty,ing .map(&h{ c.each(h,hs&from,hs&to) })
    }
    # Ying for something_8 takes $from->$to
    me.either_8 = &acgtRc{
        me&either_ftk,c;
        each in c.rows {
            !ns&fromt and throw "!fromt"
            $h = n.sc[c.k];
            $to = hs&to;
            $jo = toy&R;
            to = joc&s;
            # froms - for|on the to node path
            $ef = to.y[c.fk] ||= Cye([h.t,1]);
            ef.t != h.t and throw "misnodepath"
            #  /$fromt - the from node path
            $fo = fio(ef,ns&fromt);
            fo.sc[c.tk] = h;
            
            c.each and c.each(h,hs&from,hs&to,ef,fo)
        }
    }
  
  // 3 - Domes time connect items
        
    // nodes at each end of time
        # Ying|step|node all
        me.Ying_o2 =
        me.Steps_o3 =
        me.Nodes_o3 = &acgtRs{
            me&sahazaja,R;
            me&Domes_o3,R;
        }
        # domes, transbrack init
        me.Domes_o3 = &acgtr{
            $s = rc&s;
            me&etos_o3,r,s;
            me&settle_o3,r,s;
            me&dome_o3,r,s;
        }
        # domes, transbrack accept
        # everyone &bready or -> conclusion
        me.Domes_7 = &acgtRpr{
            $s = rc&s;
            # %%dome replace if any new
            me&dome_7,R,p,r,s;
            # when not &bready, ask R%Ying to come back:
            me&bready,r and me&ha,R,{waits:'wants',wants:s}
            else { rs&isbready = 1 }
            me&settle_6,R,p,r,s;
            me&settle_7,R,p,r,s;
        }
        # deeper first, depending on Sy&N (S = py&s)
        me.Domes_7_upward = &acgtRpr{
            $s = rc&s;
            # still state
            me&brackstable_7,R,p,r,s;
            me&settle_7_upward,R,p,r,s;
            
            me&node_accept,R,r,s;
            # < might sleepytime if brackstable
            #   && no elvising into brackology, etc...
            
            # %%eto|from
            me&etos_6,R,p,r,s;
            me&etos_7,R,p,r,s;
            # display
            return me&stepbrack,r;
        }
    
    // ending &Steps_7, &Ying_8
        # $p done: $p & $j+ Domes_7
        #  depending on !node_issleeping
        me.Steps_7 = &acgtRprs{
            $stepsleeping = me&node_issleeping,R,r;
            
            $rev = [];
            each iz sy&N {
                $j = zy&R;
                me&node_issleeping,R,j and continue
                me&Domes_7,R,p,j
                rev.unshift(z)
            }
            each iz rev {
                $j = zy&R;
                !j || j == z and debugger
                me&Domes_7_upward,R,p,j
            }
            stepsleeping and return

            me&Domes_7,R,p,r;
            $g = me&Domes_7_upward,R,p,r;
            me&walls,g,'b:3.3h9';
        }
        # Ying done, orgs comeback
        #  R%Ying Domes_o3 but not _7
        #   except to have za commit
        me.Ying_8 = &acgtRs{
            me&node_accept,R,R,s;
            
            me&etos_8,R;
            me&settle_8,R;
            me&waits_8,R;
            
            # < push stepbrack to the Outlog
            if (!me&node_issleeping,R,R ) {
                $g = me&stepbrack,R;
                me&walls,g,'b:3.3h9';
            }
        };
    
    // < conclusion *Ying_8 -> waits_8)
       =pod todo
        < # Yingterms
        %%dome 
         < and other %%tricks
        &settle, meaning a wants b to be settled,
          quickly decided, else comeback
        < catching that %Pave elvis async already @315
           coming back to complete bunches at a time
        < io making sense of eg %%tw, %ein,
          but probably not &settle, too micro to wait
           blocking reads only for Pinnings: S o Thing
        < upper levels of %acty or R/r tugging lower
          %Paving would become acty=2,
           meaning something acty=1 (%%openey) succeeded
          and produce a %%Live (Qc&s)
        < %Paving basically top-down &settle,
           and some kind of r%acty=R%acty-1 tugging spread
          runs out of %acty=1->%openey far enough in
          so $p/* should &settle,
            but $p/*/*/* neednt be %openey (or settled?)
          > becoming %Paving_good|in all the way down|up
          might be up to r:Know to %%wants:r/*,acty:1,settled,
       
       // mostly
         most behaviour decisions wait for &settle
          waiting for confidence
          eg selecting nodes eg S o ... or &nodeo

         most behaviour reflexes wait for &bready
          just needing a bit of resolution
          eg begin reaction as txn on brack
            as in %%may,... -> ...,%may, sorta
        
         and they form loops!
         
       // Yingterms - see nodeio-Yingu-scussion
        messaging / nodes / time
        find loops, pause/debug/trace
       
        %Yingu
        < display for Ying, out of time
        R%Ying @296 - repeatedly
         may be planned, e with %term
         or random e (click)
        
        arrange for next Ying to come back with
         %terms - arrival protocol
          eg visit only $to, not $to/**
           for any %%eto upwards
          otherwise figured by elvis %tunneling
        
        by sorting waves of wakers
        < p%priority or nodes refd by another waker first
        < deeper nodes first, all siblings at once
          supposing their reason to be is compatible,
           avoid re-%%waits when theres %%eto to deliver
        
        from now and before
        < undropped e when sccb throttles
        < come back in at least a little while
        
        noticing when we might
        < interrupt busy system
         < to refine eg &etos_6 &brackstill
        < give up on
         < &brackstill %%waits
          < until what it %%wants re-&settle
         < sheer change (lack of) in motion,
           if all %Zif-able, spotting increases etc.
        < go randomly visiting ($p/10s?)
          where further time plots emerge
       =elvis
  
  // 5 < Domes
   # < %%dome
   # < nodeein
   # < nodee test
   
   
   // %%dome - residing state
        =pod %%dome:$t,... - a row that resurrects
         # not: another $z to seem in this one via bracko
         @o3 sa'dome' -> ha, each nc&recycled=1
         @6:
           you ja your permanent-er state out of it
           eg %Ying has orders of $p waiting
           or commit log
           or %Paving sanity checking as we .5<->.1
         @7:
           any ha %%dome:$t,... replace them
            < or do some el=...
              eg delete with where clause
            < or something configured
           one ha %dome:$t - to drop it
           no ha %dome:$t* - to keep them all
            maybe for a ttl
         for &bracko and similar (&brackgroupX|&brackstill|&brackstabliser)
           nc&drop should appear gone,
           in time for other Doming_7 to not get it
        =cut
        
        # += %%dome from last time
        me.dome_o3 = &acgtrs{
            me&zaa,r,'dome' .map(&n{
                nc&drop and throw "dropsnot"
                $w = n;
                nc&recycled and n = ny&up
                $O = me&ha,r,n;
                # stretch, through/from the same S
                Oc&recycled = 1 + (wc&recycled||0)
                wc&S and Oc&S = wc&S
                
            })
        }
        # remove old one if obvious!
        me.dome_bracki = &acgtrn{
            $p = ny&up;
            p && pc&recycled and pc&drop = 1
            else {
                # < indexes enough to conclude that it's that
                # if it's entirely that, intensity could increase
            }
        }
        # named traction
        me.dome_S = &acgtrkS{
            $having = &n{
                nc&S ||= S
                return nc&S == S
            }
            me&dome_traction,r,k,{having}
                .map(&n{
                    #~>4 indoc: ki(n,4.23)
                })
        }
        # commit new? dome
        me.dome_traction = &acgtrkc{
            k ||= 1;
            c ||= {};
            
            $are = me&jaa,r,'dome:'+k
            c.having and are = are.filter(n => c.having(n))
            
            $neu = [];
            $old = [];
            are.map(&n{
                #~>4 of: ki(n,4.23)
                ns&el and 'where/what?'
                (nc&recycled ? old : neu ).push(n)
            })
            $says_drop = neu.filter(n => hak(n.sc) == 1);
            says_drop.length && neu.length > 1 and throw "drop + replace"
            
            !neu.length and 'keeps them all'
            else
            says_drop || neu.length and old.map(n => nc&drop = 1)
            
            return c.having ? neu : old
        }
        # %%dome replace if any new
        me.dome_7 = &acgtRprs{
            me&dome_traction,r,1
        }
        
        
        
   // %%eto - externalising state
        # $to += %%efrom...
        me.etos_o3 = &acgtrs{
            $ef = sy&efroms;
            !ef and return
            me&ioty,ef .map(&fo,{
                $h = fos&etos;
                # h may re-node_hoist before we 7, if from /**
                fos&using = hs&current;
                hc&el == 9 and foc&el = 9; return
                !hs&vers.includes(hs&current) and throw "vers!"
                !hs&from and throw "!from"
                hs&to != s and throw "to!"
                me&ioty,h .map(&n{
                    # each row is mixed in, +%%efrom
                    n = me&ha,r,n,{efrom:hs&from}
                    # < looking at s & n should notice this link:
                    ny&efrom = fo;
                });
            })
        };
        # $from %%eto
        #   -> $from sy&etos
        #   -> Ying%%etos
        # < brackstill config/slep
        me.etos_6 = &acgtRprs{
            # all %%eto from this node
            $rows = me&jaa,r,'eto' .filter (n => !ns&efrom);
            !rows.length && !sy&etos and return
            # loads up sy&etos
            $c = {rows,k:'eto',tk:'etos'};
            c.on_el9 = &h{
                hs&current = h;
            }
            c.each = &h{
                $fromt = hs&fromt;
                # brackstill version off the previous
                hs&vers ||= [];
                if (hc&el != 9) {
                    $la = hs&vers.slice(-1)[0];
                    $cha = me&brackstill,r,h,la;
                    if (cha) {
                        delete hs&accepted_boring;
                        # clone into vers[], h/* replaces
                        hs&vers.push(Cye(h));
                        #~>3 newvers: h.t
                    }
                    hs&current = hs&vers.slice(-1)[0];
                }
                !(hs&from || !hs&to) and throw "!to|from"
                if (hs&accepted == hs&current) {
                    # remove here once they accept 9ing it
                    if (hc&el == 9) {
                        ~>2 GC: h.t
                        fio(hy&up,h.t,9)
                    }
                    $neu = !hs&accepted_boring;
                    hs&accepted_boring = 1;
                    neu and ~>3 hoistcept: h.t, '<-', fromt
                }
                else {
                    # asking %Ying to transport
                    me&ha,R,{etos:h,s,fromt}
                    !cha and ~>3 oldnews: h.t, '<-', fromt
                }
            }
            me&either_6,R,r,c;
        }
        # $to %%efrom marked as accepted
        #  relaxes $from sending it
        me.etos_7 = &acgtRprs{
            $ef = sy&efroms;
            !ef and return
            $gone = [];
            me&ioty,ef .map(&fo,{
                $h = fos&etos;
                hs&accepted = fos&using;
                hc&el == 9 and gone.push(fo); return
                # something in the way it is now?
            })
            gone.map(fo => fio(ef,fo,9))
        }
        # Ying %%etos
        #   -> $to sy&efroms
        #   -> Ying%%waits:eto,wants:$to
        me.etos_8 = &acgtR{
            $rows = me&jaa,R,'etos';
            $c = {rows,k:'etos',tk:'etos',fk:'efroms'};
            c.each = &h,from,to,ef,fo{
                # $to tidies efroms, once el=9 accepted
                # send attention
                me&ha,R,{waits:'eto',wants:to}
                
                ~>5 efroms hoisting: ef.t, '<-', fo.t
            }
            me&either_8,R,c;
        }
   
   // %brackstable - still state
    # puts sy&settled brack versioning, r%brackstable++
    #  sees future R as the same
    #  and includes nodes %current below
    #   for &settle's &halfsettled
    me.brackstable_7 = &acgtRprs{
        $se = sy&settled ||= Cye([s.t,1]);
        
        me&brackstabliser,r,se;
        
        ses&brackstable = ses&accepted == ses&current ? 1 : 0;
        ses&accepted = ses&current;
        
        # how many times this node Domes_7 without brack changing
        $was = me&ollbs,r,'brackstable' || 0;
        ses&brackstable and rs&brackstable = 1 + was
    }
   
   // %%settle - still state
    # $from sees a version of each &settled,$to
    me.settle_o3 = &acgtrs{
        $tos = sy&settletos;
        !tos and return
        me&ioty,tos .map(&h{
            hs&current and hs&using = hs&current
            hs&from != s and throw "from!=s"
        })
    }
    # %settle emits|completes
    me.settle_6 = &acgtRprs{
        # all %%settle:$to
        # nothing in the row matters,
        #  only the from-to direction,
        #   orders Ying wake towards settle
        $rows = me&jaa,r,'settle';
        !rows.length && !sy&settletos and return
        $c = {rows,k:'settle'};
        c.each = &h{
            # asking %Ying to transport
            me&ha,R,{settles:h,s,fromt:hs&fromt}
        }
        me&either_6,R,r,c;
    }
    # resolve &settle at a nodes 7
    # gathering them to do all at once in reverse
    me.settle_7 = &acgtRprs{
        me&settle_71_halfsettle_down,R,p,r,s;
    }
    # and depth first:
    me.settle_7_upward = &acgtRprs{
        me&settle_72_settled_up,R,p,r,s;
        me&settle_77_settletos_accepted,R,p,r,s;
    }
    # the settled to - having froms/**
    #  push s/* a froms with %halfsettle_for
    #   causing brackstabilising there
    me.settle_71_halfsettle_down = &acgtRprs{
        $froms = sy&settlefroms;
        if (froms) {
            $N = fromss&nodes_below = me&nodes_below,s;
            !me&ioty,froms .length and return
            each in N {
                $nf = ny&settlefroms ||= Cye([me&tpath,R,n ,1])
                ac(nf,'halfsettle_for',s)
            }
        }
    }
    # the $from<-$to
    me.settle_72_settled_up = &acgtRprs{
        $froms = sy&settlefroms;
        if (froms) {
            # $to:r checks itself, makes version
            #~>3 settle_7 from: r.t
            # everyone gets a sy&settled from &brackstable_7
            $se = sy&settled ||= Cye([s.t,1]);
            !(se && sey&R == r) and throw "brack version"
            sey&settlefroms = froms;
            $washalf = ses&halfsettled;
            ses&halfsettled = 0;
            ses&settled = 0;
            
            if (!rs&isbready) {
                # generates %%waits, will come back
                ~>4 set7 isntbready: r.t
                return
            }
            if (!ses&brackstable) {
                me&ha,R,{waits:'settle',wants:s,for:'onemore'}
                ~>4 set7 onemore: r.t
                return
            }
            
            ses&halfsettled = 1;
            
            # nodes below are at least &halfsettled
            # when we are them:
            each in fromss&halfsettle_for {
                # when we become &halfsettled
                washalf and break
                ~>4 set7 half aboving: n.t, '<-', s.t
                me&ha,R,{waits:'settle',wants:n,for:'nodesabove'}
                # < $s/$n awake at the same time is ok
                # < that could be $n%onlyish (not $n/** again)
            }
            $non = me&settle_halfsettle_down,s;
            if (non.length) {
                ~>4 set7 half below: ki(non,4.23)
                non.map(&n{
                    me&ha,R,{waits:'settle',wants:n,for:'nodesbelow'}
                })
                return;
            }
            
            ses&settled = 1;
            # ses&current -> hs&accepted
            # < hc&el=9
            me&ioty,froms .map(&fo,{
                $h = fos&settletos;
                !hs&from and throw "nofrom"
                hs&current = ses&current;
                if (hs&current != hs&accepted) {
                    ~>4 set7 awaits: h.t, hs&from.t
                    me&ha,R,{waits:'settle',wants:hs&from,for:'settled'}
                }
            })
        }
    }
    # checks $to/* (nodes below) are %halfsettled, returning non
    #  n may not immediately inform $to of losing it
    #   eg if tunneled into, no s Doming_7
    #    $from would think s still &settled,
    #     until $to:s wakes for:nodesabove
    me.settle_halfsettle_down = &acgts{
        $froms = sy&settlefroms;
        !froms and return []
        $N = fromss&nodes_below;
        !N and throw "missing &settle_71_halfsettle_down"
        $non = [];
        each in N {
            # check if ready
            $nse = ny&settled
            nse && nses&halfsettled and continue
            non.push(n)
        }
        return non
    }
    # ack $from<-$to
    me.settle_77_settletos_accepted = &acgtRprs{
        if (sy&settletos) {
            # $from:r accepts version of $to
            # < wanting to have seen the &settle,$to again
            #    or chase the dome that didnt do it
            $tos = sy&settletos;
            !tos and return
            me&ioty,tos .map(&h{
                #~>3 settle_7 accepts: hs&to.t, '<-', hs&from.t
                # $to sets current when settled (ish)
                #  which we started using, and now:
                hs&using and hs&accepted = hs&using
            })
        }
    }
    # Ying takes %%settles $from->$to
    me.settle_8 = &acgtR{
        $Y = Rs&Ying;
        $set = Ys&settles ||= Cye(['settles',1]);
        
        $rows = me&jaa,R,'settles';
        $c = {rows,k:'settles'};
        c.each = &h,from,to,ef{
            # all tos and froms
            # < no independent list of them is needed?
            #   since they always progress the settle when awake
            #   see %%settle <-> %%waits
            !(hs&to && hs&from) and throw "%%settles!s"
            #ac(set,'tos',hs&to);
            #ac(set,'froms',hs&from);
            
            if (hs&accepted && hs&current == hs&accepted) {
                $neu = !hs&accepted_boring;
                hs&accepted_boring = 1;
                neu and ~>7 settled: to.t, '<-', from.t
                return
            }
            
            # attend $to, probably
            me&ha,R,{waits:'settle',wants:to,for:'to'}
        }
        me&either_8,R,c;
    }
   
   // %%settle <-> %%waits
    # > redundant orderer of orders
    =couldbe
     Ying waits_8, wakers order regarding &settle, etc
     not: a lifo of $froms awaiting &settle,
      not even a $to-before-$from separator,
      to catch up lost|tangled $from-$to-$from impulse:
     
       $from|$to generate 8%%waits:settle,wants:each other,
        to filter that by settle progress:
         eg that $to should &settle,
          then $from can have $to &settle
        $from 
         &settle_6 - wants $to to &settle
        $to
         &settle_7 - checks for &settle
          pushing &halfsettled to children
          versioning %wou for:
        $from
         &settle_7 - accept $to &settled
    
      while s &settle z, wakers[] may be:
       sy&settletos/$z
       zy&settlefroms/$s
      both mean wake z then s,
       which tends to happen anyway,
       and &settle blocks anything not ready
     
     one day:  
     < loop detect !sooner && !later
        go for least conflicted, earliest in Sy&N
     < guarantee the eventuality,
        check every Y%settles %from?
     < instant Yingu innard, style of collapse into time
     < partition into several single-minded Yings,
       for atomicity,
     < study errors
    =elvis
    me.settle_wakers = &acgtR,set,wakers{
        $later = [];
        $freeze = [];
        $sooner = [];
        $l = Rs&Outlog;
        wakers.map(&s{
            $j = sy&R;
            !j || jc&s != s and debugger;
            
            $tos = sy&settletos;
            if (tos) {
                # waiting for these
            }
            
            if (js&brackstable > 6) {
                $few = l.slice(-10);
                $many = few.filter(wake => wake.includes(s)).length;
                if (many > 3) {
                    ~>4 freeze: s.t
                    freeze.push(s)
                }
            }
        })
        return wakers.filter(s => !freeze.includes(s))
    }
   
   // < %%waits - state around
    # Ying%%waits,wants:$to
    #  is the only way
    #  to come back for $to etc
    me.waits_8 = &acgtR{
        $wakers = me&jaa,R,'waits','wants';
        me&reaw,R,'Outlog';
        $l = me&rollbs,R,'Outlog',[];

        # regroup!!
        $Y = Rs&Ying;
        $set = Ys&settles;
        me&settle_wakers,R,set,wakers,l;
        
        l.push(wakers);
        !wakers.length and return

        # Ying and each node has %terms,
        #  they must accept the wave is done
        wakers = wakers.map(&n{
            return {wake:n,terms:{}}
        });
        me&Yinge,R,{wakers,terms:{}};
    }
    me.Yinge = &acgtRc{
        me&rollbs,R,'Iinint',0;
        $starting = Rs&Iinint++ < 5;

        $elvising = &{
            # visits those r**
            $wakers = c.wakers.map(&c{
                $r = c.wake;
                r = ry&R;
                !isR(r) and throw "notR"
                c.wake = me&yfuture,r;
                c.ret = 1;
                return me&elvis,R,'reYn',c
            });
            # on a single trip to %Ying
            # pack: es&z are e, simultaneously
            c.pack = R;
            me&elvis,R,"Yingvoids",c,wakers
        };
        # avoids usual timing of Elvoids:
        # < should ec&when exactly
        $del = starting ? 30 : 3000;
        $Co = me&rollbsc,R,'Corresp';
        # limit to one feedback loop
        $yeah = me&sccb,Co,'Yingvoids',elvising;
        G&yl,del,yeah;
    }
  
  // 6 < frontends
   // < &nodei|o|e - makes %%eto..., going somewhere
      // nodeio-doc 
       =elvis
       focused on:
       &nodeo - reading %%ein C with Q, immediate return
         maybe there are handlers
         an inter-node o backend
       &nodei - transports via %%eto, wanders off
       < conversely:
       &nodeo might turn into:
        i %%e:hunter who will bring back the goods
       &nodei might merely:
        find %ein serving async, immediate return
       
       &nodee,to,t,a,q
        is &nodei $to %%e:t,...q
        expecting %%efrom:to,e:t,...a
         supposing $to:
          &nodeein,t,&from,q{produce %%a-ish}
           which &nodei back to $from
           including %%e
       basically,
        $from %%stuff -> $to, esp if diff
        comes back to $from once &settle,
         or sooner if $to %%answer -> $from
       usu. &nodei,
        moving intention around
        ie,
        gets delivered, revoked
         attend when different, by way of:
       
       brackstilling
        has %%stuff changed?
        if still:
         &nodee can same answer same question
          immediate return potential
        if diff:
         the $to must attend,
          returning to $from once &settle
           or sooner if $to &nodei back to $from
          all %Ying managed
        helps:
         receivers of %%efrom,...
          eg CBing (value contest/news)
          accept versions of it when ready
          see 'check CBing &nodei is as it was'
          could -%%e%done or +%%rebase if diff
           if &nodeein +%done it when done
           or %%rebase = prescribed differencing,
            is applied, via a big-deal filter, eg:
              a %Compiling in its push-phase,
               can decide to redo, because CBing, already
               depending on the algorithm (||= C percolation)
                to be able to tune inputs near the end of their workload
                including just after it,
                 if the answer is invalidated
                is nice reflexive terrain
       
       eg.
        $from = a %Compiling sequencing operations:
         makes Know%fully and selects %%Live
          $Live = &nodee $to %%Live %%e:fully
           and e:fully is ein there, subplot:
            an anyone-elected %acty=3
            must produce %%Live,
         
         $from %%waits for a response?
          or %%fail if e%edone and !%%Live
         
         $to avoid doming their 'main thing'
           eg CBing
          until all %%e%done
           would new CBing before $from receives %%Live,
           so $from receives also the new CBing,
            bound to the %%Live used for thinging
       
       =elvis
      
      // < &node[eio]
        # %%e:action, expects reply re the same %%e
        # see &nodei re c+o
        me.nodee = &acgt,j,to,t,a,c,o{
            $jo = toy&R;
            to = ojc&s;
            c.e = t;
            # the %eto:to,e:C:question,...details
            $n = me&nodei,j,to,c,o;
            $e = ns&e;
            !isC(e) and throw "nodei!%%eto,e"
            # the %efrom:to,e:C:question,...answers
            $replying = me&ja,j,{e};
            $an = me&ja,j,ex({e},a);
            
            if (es&done) {
                !an and me&ha,j,{fail:'done',e}
                else {
                    if (hak(a) == 1) {
                        # eg returning %%Live sent back
                        an.length > 1 and throw "many rows"
                        return an[0].sc[haks(a)[0]]
                    }
                    # rows returning from this %%e
                    return an
                }
            }
            else {
                # waits?
                # %%eto hoisting should gently hurry up etc
            }
        }
        # %%e:handler, sync response
        #  %Ying will otherwise attend $to
        me.nodeein = &acgt,j,t,cb{
            # for e:t into j
            # cb = &from,q{produce %%a-ish}
        }
        # moving intention around
        #  row = c(identifying marks) + o(other stuff)
        #  so c finds the rolling %%eto,
        #   and reuse $e when o changes
        # < require %%dome? as T.Mw?
        me.nodei = &acgtj,to,c,o{
            # < bracko C.t == t
            $jo = toy&R;
            to = joc&s;
            $q = ex({eto:to},c);
            
            $sending = me&ja,j,q;
            ex(q,o);
            if (sending) {
                sending.length > 1 and throw "cant tell %%eto apart"
                $n = sending[0];
                c.e && !ns&e and throw "bug"
                ns&e && !c.e and throw "bug"
                # still this apparently
                #  may !e%done when %Ying brackstills it
                ns&e and q.e = ns&e
            }
            # < %Ying relays progress via %%eto?
            #    maybe if we %%uniq this it would return the recycled one
            #   or just via e, how else?
            $n = me&ha,j,q;
            
            return n
        };
        # S o $remote/$Q using|returning %%tw,...
        # < persistent query, knowing io it pipes into,
        me.nodeo = &acgtj,to,Q,qe{
            $qs = ex({tw:Q.t},Q.c);
            $jo = toy&R;
            $N = me&za,jo,qs;
            if (!N) {
                me&may,j,'input','s',{tw:Q.t,waits:'not-found'},qe
                .map(&n{
                    ~>3 CREATE: ki(n.sc.s,4.23)
                    #  < may already have {s,may:input} if el=2
                    #   < use %Pavings%ein to input
                });
                me&tsc,'non';
                return
            }
            if (N.legnth > 1) {
                # in the web you would want many answers,
                #  perhaps candidates get see s** to rank/sync
                me&tsc,'unc';
                me&waits,'unclear'
            }
            return N
        };
      
      // nodeio-scussion # further into %Compiling 
       =elvis
       # Know etc means a Know/** node
       # and that &nodei somewhere revisits somewhere
       Know builds tw, &settle
       Know have clients for CBing
        Ghost &nodeo Know their thing,
        Ghost &nodei Know their downstreamness,
         Ghost%dige if not as Know%dige implies
       Know !Ghost, 
        %%may create some Travel/$t c&W=Looking of it,
         to start doing something
       Know CBing per downstream,
        &nodei Ghost %%cha,
         which Ghost &nodei Travel %%cha
       and in reverse: Know <- Ghost <- Travels
       
       Travel/$W,
         receives CBing &nodei %%cha,
          - decides to update itself,
          - gets the inputs ready,
          - runs the thing,
          - tractions a bunch of $n/$u etc
            artifacts to save
             by way of a %Search that accepts writes itself,
              then presenting a tree of things to:
             n all G&t it put, push to That/**
              a downstream Know, non-CBing
              < via another %twin
             u all G&t it used, to Know/**
            push must:
             check CBing &nodei is as it was,
               so a %%rebase might emerge to Travel/$W
                in/near &nodei brackstill
               which our work (bunch of %%e:push) hangs off
              ie know Qs&parent on push,
              different:
               $n - %%rebase strangeness,
                 our downstream changed without us
               $n+$u - Travel/$W again, must know current
                 eg $W loading/saving itself
               $u - new input since Travel/$W
                 eg %dige can CBing again after we push
            if push:
              push all $n, That/**%%e:push,n (->%Paving->G&t)
              note all $u, Know/**%%e:pulled,u (%dige = that used)
               disimplying Ghost/*/**%dige must be expressed
                  semi-syncd Ghost mappings should be resolved after Travel/$W
                   until everything is aligned with Know/**,
                   might end up chasing loops,
                    diff the Travel of several $W in time
               
            $n/$u sets for %twin/$W/* may be canonical or not
             when its not invoking all the G&t the $W gets up to
               
            ideally all those G&t + W:KnowThee%Ying itself
             are in an Over%Search
              branching things for KnowThee
              to be merged with the Uber%Search above that,
               saving each thing,
                can sorta undo if interrupted,
                 from memory or Uber git reset
               < getting the new tree of changed things ready,
                 then commit just changing a link
             
            then!
            back to:
            CBing &nodei as before, since the %dige is out
            which might be real fast since the gear
             is all ready to pass another %Live through
      
       =elvis
      
      // nodeio-Yingu-scussion # sort activity
       =elvis
       underneath &nodei:
        $from &nodei $to %%stuff
         put into $from%%eto:to,stuff
        %Ying hoists %%eto,stuff
         &brackstill-ing %%stuff
          attending $to
       # < Yingterms:
         then (once $to &settle or sooner or later)
          attending $from
         sooner if:
          &nodee makes an %%e:e to round trip:
           $from exacting %%eto:to,e <-> %%efrom:to,e
          $to &nodei $from, related or not, attends $from
         later if:
          %%e can know if !e%edone etc
           see 'not accepting CBing while busy'
        
        if %%eto,dome=questions,
         persists them, as usual
          you periodically refreshing %%dome
         if %%dome, could anyway, see %%dome ttl
         
         hoisting progress could appear on it,
          eg $to accepted, then &settle
          the hoisting-out could be a Y,
           involved for $from dome init,
            and $to delivery, or anything
       
       ecoursing:
        where the e takes us/our stuff
        eg c&el makes adjustments on some $to ground,
         probably the same %%dome as the $from
         or to a corresponding idea:
        $to %%efrom,dome=questioned
         to wakey the $dome part of $to,
          like routes
        re %Slope:
         they plumb somewhere else,
          that $from can detect the state of
           follow our affect through the machine
           eg wanting to watch Babz %Compiling
            to bring meta back to the ghost
            ie cursoring details transient in the process itself,
             rather than even biggering the result
         $e might:
          encode and wander the network meanwhile
           coming back to pick up that $e again,
            contracting some %Search to keep a way in:
             matching a rebooted %%eto
              by brackstill == that $e that left
       
       =elvis
  
   // &bready - if no %%waits
    =elvis
     &waits,... modulates something%waits
      R%waits has it

     &bready and return # implements a waitsology
      R%waits -> %%waits
      %%wants:$n%%waits -> %%waits:wants,...
      %%waits -> pause|shy $R
       and inners, unless $n%%waits,
         or %%waits:wants them,
         fuzzy line? who is waiting for who
         top down if same cv?
       might be a recognisable solution
       might be retry loop,
       do others first (moreso if %%waits:wants)
    =elvis
    me.bready = &acgtR{
        # got to via %%wants:R below
        !Rs&wou and throw "notbegun"
        # R%waits -> %%waits
        each in Rs&waits {
            me&ja,R,{waits:n} and continue
            me&ha,R,{waits:n}
        }
        # %%wants:$n%%waits -> %%waits:wants,...
        me&jaa,R,'wants' .map(&n{
            # < %%waits bracktrick out the rest of the values,
            #   unless viewed from the right angle, through waits?
            ns&waits and return
            $z = ns&wants;
            !isC(z) and return
            # could be p/r/s
            $j = zy&R;
            if (!js&wou) {
                # not a node
                js&waits and me&ha,R,{waits:'wants',wants:z,notanode:1}
            }
            else {
                # < unpossiblate infinite recursion
                #   with me&ind bit on the T?
                me&bready,j and me&ha,R,{waits:'wants',wants:z}
            }
        })

        !me&ja,R,'waits' and return
        # < %%waits -> pause|shy $R
        # avoiding the rest of the activity
        return 1
    };
        
   // &settle
    =elvis
     &settle,z and return # waits for z to seem ready
     
     &settle sets/checks a node that is:
      relative to this node, which wants it,
      &node_issleeping, not able to unsettle
      < not pending elvising:
        as in %%wants:n,acty:1,settled,
         unless %%acty has transmit
      &halfsettled @7:
        &bready,
        &brackstable: ja == za
      and:
       nodes below are at least &halfsettled
        eg: Settled/Unsettled/Chaos
         where Chaos is not &brackstable etc but Unsettled is
       < should be able to climb bunch of index then a node,
         'nodes below' meaning the next layer of nodes beyond!
    =elvis
    me.settle = &acgtRr{
        R = Ry&R;
        isar(r) and return r.filter(n => me&settle,R,n ).length
        r = ry&R;
        $from = Rc&s;
        $to = rc&s;
        # log it, so Ying_8 can transport-think
        !me&ja,R,{settle:to} and me&ha,R,{settle:to}
        # is figured at Doming_7, once est.
        $se = toy&settled;
        $settled = se && ses&settled;
            # check these two loose-able aspects:
        if (settled && !me&node_issleeping,R,r) {
            ~>7 settled!sleeping: r.t
            return 1
        }
        if (settled && me&settle_halfsettle_down,to .length) {
            ~>7 settled!down: r.t
            return 1
        
        }
        !settled and return 'not settled'
    }
    
   // < &acting, &acty
        # a heading for some %Part of it
        # < swallowing brack
        #  < knowing T.act here and when ha
        # acty:8 meaning dialectical,
        # acty:1 would be openey,
        #   buttons for the first layers of mind atop
        # they are cv-ish, yet individual doables...
        #   %%may:ha,openey:1,acty:1 - advertise route
        # then just increase %%acty to wander in to things
        #  eg when depending on something being awake
        #  eg acty=5 might be enough to know expected Wup affects
        me.acting = &acgtRt{
            t ||= T.act.t;
            $ope = me&rolltog,R,{may:t,tsc:'l',acty:8};
            return ope
        };
    
