# go there for ...
# having to contribute
  
    // for Brackio
        # index n by n%*
        #  X/k/ref(s) enumerate columns and their values
        # ongoingly to index N-news into X
        me.brackX = &acgtNX{
            X ||= {};
            X.k ||= {};
            each in N {
                each kv n.sc {
                    $x = X.k[k] ||= {};
                    # without ref(s):
                    x.z ||= [];
                    x.z.push(n);
                    # by id of the value
                    $fs = x.refs ||= [];
                    $vi = fs.indexOf(v);
                    vi < 0 and vi = fs.push(v)-1
                    $f = x.ref ||= {};
                    $fx = f[vi] ||= {};
                    fx.z ||= [];
                    # a row
                    fx.z.push(n);
                }
            }
            return X;
        }
    // for Nodar
      =write or read (autovivificatorialy)
        X.$someindex ||= x += $r
       leading to x, another|inside X via $someindex
       x remembering what indexes it is in?
        joins|varies by x.z/r,
         the members being added to x locatable space
      =cut 
        # the X/$t += r
        # r could be Y, s (C), X|x, anything
        # in &RbitXarrive it is R, &brackX it is a row
        me.X_t = &acgtXtrk{
            k ||= 't'
            X[k] ||= {}
            $x = X[k][t] ||= {};
            x.z ||= [];
            r && x.z.push(r)
            return x
        }
        # the X/uniq($s) += r
        me.X_s = &acgtXsr,kf{
            kf ||= 's'
            return me&X_refer,X,s,r,kf
        }
        me.X_refer = &acgtXsr,kf,kfs{
            !kf and throw "named"
            kfs ||= kf+'s'
            # by id of the value
            $fs = X[kfs] ||= [];
            $vi = fs.indexOf(s);
            vi < 0 and vi = fs.push(s)-1
            $f = X[kf] ||= {};
            $x = f[vi] ||= {};
            x.z ||= [];
            r && x.z.push(r);
            return x
        }
 
 // &togcon via %Te
 =spec
  < pointers may mung to sensible syntax
     so they can be squished together...
    may not need to for %togcon.$pt.$ok,
     is structured enough.
     about that:
  Nine/$t/($seven|four):expr/...
   $expr are expected of|beyond -eight/** usuality
    direction for their expression
   eg drilling into certain -ology
   can be done once -eight is got, idle
    then Story can reset with them.
   < leave (save Te%togcon)
   < turn up (load Te%togcon) as they:
    < -eight**, a while after a Page++
       similar to 'once -eight', 
    < Ying@8, while running, state will be precise
      This needs to know in advance
   < mung $pt + $ok for tidier $Nine/$t/$expr:
     various $expr projects (eg %togcon)
      want to save under a $p, which they may share
      so they might share room in $expr%*/** space,
       if compatible. eg, %togcon+%pointe:
        can use the same index, the endpoint has room:
         okc&s=ope, oks&e:pointe/says things there
          or %pointe would okc&s,
           %togcon would oky&cv
         # terrain: mergible A mind, split complicated
     
     mostly:
      $t/$expr%togcon:2/$ok # $expr implies $pt
     verbosely:
      $t/$expr%togcon/$pt/$ok # on|for an $expr,
      $t/$expr:togcon@8/$pt/$ok # on its own $expr
       and okc&s = $ope
        or is it oky&cv transposing $ope? modes:
         + 1,2,3,4[1-4],5[11-55],6[111-666]...,
         and the inverse
         - 09,08,07,06[9-6],05[99-66],04[999-666]
        subnetty numbers:
         quickly slowing down into precision
         are in order for ages
         until:
        looping back with further dp:
         + 45[11-44],56[111-555],67[1111-6666]...,
        %togcon for ope wouldnt handle that,
         something iterating a vast C* shall be:
          navigating via that cv dealing mode
           confused or finished when gappy|vanishy trail
            resorting to cv index:
             would tally each subnet, per dp
           or Cy&next, or start of next subnet, etc
            know where the next chunk is
             eg TripScaler, looks for next level few things to try
        # of geometric intention
        # we might have any shaped room+sequencing in mind
        # perhaps space wraps around like that
        # so it can also represent time,
        #  eg 1,2,3,41,4185 <- happens now,42
        #   belongs to the third wave of 4*
        #  so it might not wash away whence:
        #   eg 3(el:2),42(el:8) - keeps 1,2,42 (and 4185)
        #    vanishes 41, having come back to 42 > 41
        #     through a higher timeframe: 3
        #      being re-authoritative: 3(el:2)
        #      or not (keeping 41): 3(el:8)
        #       until 3(el:2),43 later,
        #        or not if its 3,431 - keeps 41
        #         as in not climbing into 43 from 41,
        #         just seeing a part of it
        # or whatever x+y things
        # all those parameters are up for ...
        #  eg how many dp to increase when,
        #   stretching to map noise out,
        #   fractionating, darting (edgible simil)
        #    are around in -group*,
        #     the io.ind() row compressor, etc
        # rhythm -> structure
        #  to crystalise language
        # geoio constructo fun
        
       $expr for some -eight**
        via -expr parsing @8 means %togcon:1
        $pt restricts it to $p-four
     
     it can name '-four':
      $t/$expr:'-four'%togcon:2/$ok
       $expr targets -four (some $eight**c&pi|.t)
       %togcon:2 meaning $expr/** is a %togcon index,
        starting beyond $pt, guessed for $expr to be:
         the main pointering thing inside -four, ie:
       expanding to:
      $t/$expr:'-four'%togcon:1/$pt:'beginning-four-brackology-ology<-gate'/$ok
       for applying the meaning
       the main $pt for $expr now stated inside it,
        so we can serve &togcon for %togcon=$expr/*/*
     
      how to paint the path
       as ending in a portrait
     $pt may:
       be a loose pointer
        eg '-four', as above
        eg q/-four*-grouptri/
        would be explicit enough to start a -grouptri,
         as discovered to be a -group* thing
          and put in with that lot while -four
     $ok may:
       also loose pointer
        eg q/e*Lingo/ 
         matching $ok='e,r,on,gate_r_Lingo'
         each $ok tried, expected
          see 'test data would clue surprise unfurlments'
       which could compress to /^e.*Lingo$/ (knowing all $ok)
        to be as ambiguous as possible,
         since the -eight that -four goes into is expected
       include ok%pt, to move into that %togcon/$pt/$ok
         doesnt make sense for %togcon.$pt.$ok
        a way to include a freak in a pile of others
        # probably for a different puzzle
      when
       .$ok - have some kind of data here
        ie the $ope, or compatible projects'' stuff joint()ed somehow
       /$ok - have anything on that C
       
     movable meaning zones:
     so $t/$expr
     and %togcon/$pt/$ok
      or $expr%togcon:2/$ok
      or $t%togcon/$expr/$ok
     (gets $pt from $expr)
        
     can be placed so $t/... needs differentiate:
     
     can entirely sc jampack %togcon={...}
       Lines peel deeply? splits chunk of yaml if large
     or exude into C-space:
      $t%togcon.$pt.$ok=ope
        room in $t%*/**
      $t%togcon /$expr       /$ok=ope  or:
      $t    /$expr%togcon:2  /$ok=ope  or:
      $t    /$expr%togcon2.$ok=ope     or even:
      $t    /$expr%togcon.$pt.$ok=ope
      $t    /$expr%togcon/$pt/$ok=ope
        are variously jammed, sizo determines best?
        get $pt for $expr, etc
         have to state all $pt (the last two ^)
          if not the one $pt for $expr
     even going as far as
      $t/$expr:togcon@8/$pt/$ok
       # named after the index it is (becomes $expr%togcon)
      $t/$expr:something%togcon:2/$ok
       since they could be anything,
       apply to all|certain other possible $expr that can %togcon
     or being minimal, loosely exudey:
      $t%togcon2.$ok=ope/$expr
        know %togcon2 is %togcon:2,
         starting ahead of its first column (many $expr)
        so $pt/$ok for all $expr,
        eg turn up the volume knob on certain things
      $t%togcon2.$ok=ope
        so $pt/$ok for any possible $expr
        eg turn up the volume knob on everything
     
     so
       $expr is treated -expr
        could bind to one (maybe more) possible $expr,
         a place to hang details for all those $expr,
          ie $pt/$ok for all $expr
           $ok probably ignored by another $pt it is shared to,
            if those -whatevers are wildly different
           or:
            finds the same thing
             immersed in a different web
           it might have a number of %matches to expect,
            or the test data would clue surprise unfurlments
           then decide when to:
         sometimes be specific which styles apply to what
          subnet of the tree to start inheriting $x from
          < can css do .thermal ^^^(!hot|cooled) { cool }?
        ...
        could be supplemental,
         refer to any $expr, maybe anything,
          check some other dimension of sense across them
          etc.
        could be anything
          hoping to resolve in this Story
       arbitrary name and content, implied normal:
        given expr.t
         ~'-four': bind to c&pi == 'four'
         ~'togcon': make expr%togcon=1
           named for the index it carries
            maybe thats what @8 means?
           that it is Cified (scanned) %togcon
            to be put back together
 =spec
    # temperate -ology clusters
    #  R%Te %togcon.$pt serves .$ok for $p**
    # < generalise from label only
    # for within elvising on s-pi,
    #  where its ^^^.t must be uniq
    me.togcon = &acgtRp{
        $C = Rs&C
        $z = Rc&s
        !zy&R and throw "leave a node"
        !p and throw "give top modulat"
        # get Tes&togcon for R
        $togcon = &R,softly{
            $te = me&theTe,R,softly
            !te and return
            # < Te save: meaning collapse, empty hash scrub
            #   eg $ok:0 is as it inherits
            !softly and tes&togcon ||= {}
            $toge = tes&togcon
            return toge
        }
        $togeptok = &toge,q,{
            $pt = qc&pt
            return &q,ope{
                qc&pt != pt and debugger
                $ok = qc&ok
                if (ope != null) {
                    toge[pt] ||= {}
                    toge[pt][ok] = ope
                }
                return toge[pt] && toge[pt][ok]
            }
        }
        
        # for $g from &vlabinto, &opelabel
        #  make g/n, the label, attach click handler
        # < generalise
        $toge = togcon(R)
        py&togcon = &gq{
            # for continuous this togcon
            q.path = me.cby(g,s => sy&togcon == gy&togcon ? 0 : -2)
            #!q.path.includes(Rc&s) and debugger
            q.depth = hak(q.path)
            # R/(p) name (the -ology)
            $alsop = q.path[0]
            p != alsop and debugger
            $pt = q.part = p.t
            # R/p/(**) name, inside p
            $insidep = q.path.slice(1)
            $ok = q.name = hak(insidep) ? joint(insidep,"_")
                : 'itself'
            
            # the $p-ology
            #q.depth == 1 and q.tsc ||= 'y'
            
            # tooltip
            #  pointer is forgetting that it is 'label'
            !q.may and throw "may join"
            q.may = q.may+"_"+q.name
            # #$p-ology/#$bits
            q.c = {}
            qc&pt = pt
            qc&ok = ok
            
            # auto ope depth:!
            $ope = q.depth <3 ? 1 : null
            # on the label:
            $n = q.n = me&mtsc,g,q.may,q.s,q.tsc
            
            if (q.depth == 1) {
                # the first $n will be $p for the others
                # R%Te %togcon.$pt, serves .$ok for $p**
                
                # search R^^^ for %%toge,pt
                #  keep them to serve .$ok inheritability
                $N = []
                $inherited
                me&inheritily,R (&rz{
                    $wander = r != R && 'softly'
                    $toge = togcon(r,wander)
                    if (!toge || !toge[pt] && wander) {
                        # has never heard of $p-ology
                        !toge && r == R and throw "!toge"
                        if (q.depth == 1 && rs&Peace == 4) {
                            # made it to 4 for the $p-ology
                            # init Ying-wide defaults
                            $toge = togcon(r)
                            $open = togeptok(toge,q)
                            # the $p/itself -1?
                            #open(q,-1)
                            # < do the:
                            #sy&brackwouology_ope == null
                            #  and sy&brackwouology_ope = -1
                        }
                    }
                    else {
                        $open = togeptok(toge,q)
                        N.push({r,q,open})
                    }
                })
                
                # for this $p:
                $open =
                # for $p/**
                ny&open = &q,ope{
                    each in N {
                        $r = n.r
                        $is = n.open(q,ope)
                        if (is != null) {
                            rs&Teoptic = 1
                            r != R and q.inherited = r
                            return is
                        }
                        ope != null and debugger
                    }
                }
            }
            else {
                $open = py&open || py&label.y.open
            }
            
            $is = open(q)
            is != null and ope = is
            
            
            # -1..2 adjustable!
            me.nto(R,n,&sTe{
                $add = e.t.startsWith('C') ? -1 : 1
                # may start from an ope we inherit
                $is = defor(open(q),ope) || 0
                $was = is
                is += add
                is > 2 and is = 2
                is < -1 and is = -1
                ~>3 Togssssssss: was,'->',is, q.name, z.t
                open(q,is)
            })
            
            ns&fs = 9+((ope||0.5)*2)
            ope < 1 and ns&bri = 0.5
            ns&ope = ope
            q.depth <3 and ~>6 Toge: q.depth, ope, pt, ok, z.t
            
            return n
        }
    }
    # return R%Te, storable pointer cloudlayer
    me.theTe = &acgtR,softly{
        return Rs&Te && Rs&Te.c && Rs&Te || !softly && me&introqua,R
    }
    # climb til Peace==4, y() if rc&s
    me.inheritily = &acgtR{
        return &y{
            me.cbu(R,&r{
                $z = rc&s
                if (z) {
                    $re = y (r,z)
                    re != null and return re
                }
                rs&Peace == 4 and return 1
            })
        }
    }
   
 
 // jobs
    // &twlic, &twlim - tw matchup
        # as twlim but with one r?,l? callback
        me.twlic = &acgtNL{
            return &y{
                $M = []
                # returns list of y returns
                $ya = &zlc{
                    c ||= {}
                    c.t ||= l && l.t || z.t
                    $t = delete c.t
                    M.push(y(z,l,c,t))
                }
                $con = me&twlim,L (&lc{ ya(null,l,c) })

                N.map(&t{
                    $z = isR(t) && ts&ball ? tc&s : t
                    $l = con(z)
                    ya(z,l)
                })
                con()
                
                return M
            }
        }
        # consume L/* by t one at a time in order
        #  y(L) for missing
        me.twlim = &acgtL{
            $used = L ? me&ioty,L : []
            $for_missing
            return &y{
                for_missing = y;
                return &s{
                    !s and used.map(l => for_missing(l)); return
                    $l = L && me&fiu,L,s,8
                    if (l) {
                        $li = used.indexOf(l)
                        # before found now missing
                        li > 0 && used.splice(0,li)
                            .map(l=> for_missing(l,{now_missing:1}));
                    }
                    return l
                }
            }
        }
