# Yap
me.Sch_Story = &acgt{ return [

// Story - intents <-> extents
   
   =pod
    Story/** mark runtime difference along Plot/Point
     on %%quiet,wake: This &pageturn,
      marks where Plot%Page++ > Point
     < on %%wake or sync occurances of arbitrary etc
    we mark Point//-eight
     < locked into Story/** while marking,
        since testing and tested share Ying,
         should have some %%wake lock?
     usu spend a Page marking a Point
     if ok
       +Point:$next (on &pageturn) to continue
     else
       < Point%trouble = +Point:trouble
          no Pointc&Page_out until &accept
          locked into Story/**, consuming -eights
         then restart or resume after Point:trouble as if ok
          ignoring Point%trouble and Point:trouble,
         making this a messy testrun, semi-valid
          < Story/** and not may be separate enough?
     
    %TheNine can create|resume|update tests
     < subtests per Travel/$t
       or anything with a state to reset|repeat
       startStory,Adventure+
       eg:
     < shall go looking for %%may,
       ends up engaging a Gumpframe,
        which ... Travel/$t,
         Story letting the workflow,
         locking on %Pave, with bunch to push?
     
    -eight/-seven/**/-vat emerge
     gaining simpname from nodepile relations
      -vat -> -n|-C for sy&up does|not lead to a node
     < %Slope about sy&up, c.ip, etc.
     when ready:
      < to Dome slep the othering of R%Yingates
         if R%tunneling, wants update|change
          can we deliver e.c to specific wakers?
        from:
        %Yingates[-2..] (!%Fin) awake for streaming, then finish
         < %onlylish sometimes flaky until R:Ying itself happens
            knowing more &Yingwhen may find why,
            %Yingates/* also want selective waking
            yet it depends on *%ball%Peace and ^%Ying
    
    in bursts of activity:
     < hide most of the nodepile and nodes
     < regroupable, to Plot points
    
    once computed a bit,
      < know if weird, eg C not node or e
      < know if unexpected if $Storie
      and the whole bunch,
      < merge into similar previous %Yingates,
         waking [-3] to incorporate [-2]/*
          with %Yingates%onlyish + slep
           to keep most -gate|-seven (%Yingate),
           tallying into -eight again (%Yingates)
        by overall same-ness, looking for e:clicking
         < generated by Zif<->Lines<->C
      < ignore %Story/**, leaving only %%quiet,wake?
         could be implied by the ending of an -eight
        if e:click
          if %Story/**
           capture any adjusted ology for replay
            configuring magnifying glasses to produce test data
            not as e:clicks but as parameters on the %Yingate
             a Te proposed to be permanent,
              apply to others after it with Index?
            slep it to re-Y:pi accodingly,
           < Jx new modulat must ...
          else
           capture pointer|meanings for replay
            previously went quiet? (awaiting click) or:
             < e:click while thinking loses a &Yinge?
             < while at it, later[] may have R-d since
              
    storability:
      < the %Yingates/%Yingate -> -seven/-rows/-row/-vat becomes:
        %Storie/%Stori/-thing**
         %Storie+ are tapes to sync to $Story
         %Stori moment
          happens ||= s&when || next %Yingate
          s&rows breakdown pointing to **:
         -thing** as mentioned in s&rows, default -n
          see 'pile of nodes':
           say $step..$node, even if $step asleep
            maybe more if $node needs unique name
             in the -thing** and in the node pile,
              ie a %twmt across either,
               so Ghost..$z-node can point to the %dige%Q
                coming from a Duolish..$t-node...,
                 coming from a Travel..$t-node
       < or:
        -nine/-eight/-seven/-six/-five/-four/-three/-two/-one
          -nine a whole book
          -eight a chapter, lump of pages|trips
         %Yingate expanded about the aparatus of the plot:
          -seven a page, a trip to A.4|$Ying
            possibly more than one trip,
             ie %Jrunto many times between %Jproto
          -six the overall notion of change, plot pointering
          -five why doing (e|%Jproto plans)
          -four what doing (%Jrunto dome state)
          -three who (dome thing)
          -two part (A pointers)
          -one detail
         all may + Elsewheel, appears with developer
      
      # then Lines it
      < as diff against previous Lines (el:6?)
        web landscaping
      < which might turn into tiny Lines for $Storie:
          implying -nine/-eight/-seven/-n**, etc
          Lines[5] implies z + low light (ki d=4.23)
      < stable $Storie Lines indent -> type means:
         wide ack for similar tests|output
          subtracting normal: what most tests sound like
      
    < %The names %Plot for a new %Storie,
       Stu->toPave without %MayGansp

    < rebuild &waits_8, test against $Stories
    
    < @Story groups time, turns observe/respond corner
      pretending to be Fingo S-ing, providing:
        < log interesting acts
         eg CBing|Travel|Duolish starts|ends
        < log should be mergible with Yingu, Evelse, etc logs.
        shuntographer
        runs the game seq:
        < %Paving nice, found%Pave
        < @Story: %Paving+twinned ready
        < %Paving CB also from Ghost..$z
         diff Know..$s/found%Pave with:
          Know..$s%Paving itself
            eg %cha:Thing-has:dige,src:s,from:Q
          Ghost..$z%twin, as used by Travel..$t
            eg %%cha:Thing-has:dige,src:s,from:Q,to:z,t:t
        < %Gump gets Know..$s (+ Ghost/$t..$z)? out of date
        < @Story: %Paving+twinned+%Gump ready
        < %Story:
         any Ghost/$t..$z -> Travel/$t
         notices them vanish, knows why
        < @Story:
          start Travel/* wanted,
           pre-@Search the %Gump versions (%Jhost)
            inc anything in a $W.5, with wjs %args
          start Travel/$t
          end Travel/$t
          end Travel/*
          start Duolish/*
           $u should be as input to %Gump, or restart?
          end Duolish/*, when all is commit
   =cut
   
   // todo
    =todo
     
     -seven..-vat are Yingate's rows' properties
     
     < er diag, jam the Y:-seven until sorted,
        adjust ology|pointing or encoding after,
         usu define schema|depth-limit|reducer for random data
     
     -seven/-rows/-row/-vat
      -vat draws the something on the rows of -seven
     
     < -vat -> -row: brack in brack
       it would become a -row as well
     < -row:$b (anywhere) may include interesting by&up
       bc&shade, or the R/node/C via by&brack for it
       < leading back to a non-waker Yingate row,
         and then the r row that %%waits, etc
     < -row ref-itivity,
       maybe point to another -row (anywhere)
       esp as a later -seven/-rows/-row
       esp the one described in The**/Misc**
        collection of oddities (non-node items)
       or pool some misc upwards, on Misc accept:
        repile -row to point to it
        knowing that it was looking for it, eg &nodeo
     
     // less urgey
       < -R with sip|tip (serial or Te ip):
       < also know the R above R:Ying
         eg it starts with an %%e,to=Lingo-R c.o:^2
         see 'say $step..$node'
         -R names climb Rc&X beyond the last $node etc?
       < Ac&ip, like Y:Acec&ip or what Rc&ip could be,
          are per Run, per time finding names
         Cc&ip, like Jc&ip, Tec&ip or Xc&ip
          are per finding of the name, many times
         wave and particle, frames and movie
      
         # compression or re|de|piling:
         < stop at some -rows or -row if so simple,
           c&s = diagram pointering -thing** beyond
            or pointering nodepile if -n. gets complicated:
           changes (eg assigning c.ip) would need rolling out
            as some kind of change to auto-accept (%Zif)
             rename wants this
           novelty depiles back to -row/-vat
            to find &brackology to lay into
             and in general... diff long form, diag short form
    =todo
 
 // %Story itself
    ['Story',0.299,&acgtRs{
        
        me&reaw,R,'Story'
        $x = me&Jx,R

        # quiet,wake:Story then Story/This
        if (!me&rollbs,R,'ever_quiet' ) {
            me&quiet_waker,R and Rs&ever_quiet = 1
            !Rs&ever_quiet and return
        }
        if (1) {
        
        # sources of and tests
        me&bal,'Stories','Stories,eph'
        
        # expectation
        me&bal,'The','The,eph'
        
        # pile of nodes
        me&bal,'Nodar','Nodar,eph'

        # navigator
        me&bal,'Plot','Plot,eph'
        
        }
        # experience
        $r = me&bal,'This','theThis,eph'
        # is visited to draw them into %Yingates/%Yingate
        # < lighter drawing into -eight/-seven
    },'ift,D'],
 
 // %Stories/Stori/Eighi Live
   
   // %Stories%Pavings
    ['Stories',0.297,&acgtRs{
        me&reaw,R,'Stories,eph'
        me&inode,R;
        $x = me&Jx,R;
        Rs&Pavings = 1
        Rs&directory = "Stories"
        ah(R,'inheritscif','ball','Stori',1)
        # < give nodeo pathia, %%inside=Stori,tw=Eighi
        ah(R,'adhere','twmt',s)
        # make W**%Paving mean W/J**,
        #  J directoried inside J^
        #  %Compiling used to W**
        #  suits compiling mountains of code,
        #  to give %Paving** that hierarchy
        #   eg remotes listen to the peak
        #  as views all named in the same space
        ah(R,'adhere','director',1)
        # species=1 only
        ah(R,'adhere','fully',1)
        # less Paving brains
        # < may %onlyish settle up etc
        ah(R,'adhere','noGump',1)
        
        $r = me&bal,"Around","Around"
        !Rc&b and me&fiu,s,'vv'
        s&hue = 66
    },'ift,D'],
    ['Stories+Pavings',0.2999,&acgtRs{
        me&bewind,R and return
        me&tsc,"SP"
    },'ift,D'],
    
   // Stori/Eighi?%Paving
    # loads if The/Stori wants
    # many Stori/Eighi%dige toc for directory=$Stori
    #  usu enough to pass tests where -eight%dige matches
    ['Stori',0.291,&acgtRs{
        #me&inode,R
        #!me&za,R,'waits' && me&sleepic,R and return ~>5 Sleeps: s.t
    },'ift,D'],
    ['Stori',0.298,&acgtRs{
        me&reaw,R,'Stori'
        me&tsc,"Stori"
        # has Eighi inside
        ah(R,'inheritscif','ball','Eighi',1)
        # Stori%twmt=Stories, Stori/**%twmt=Stori
        #  does its own %eto,tw for its Eighi
        ah(R,'adhere','twmt',s)
    },'ift,D'],
    
    # loads if Stori wants
    # download details to difference an -eight
    ['Eighi',0.33,&acgtRs{
        #me&sleepic,R and return
        me&reaw,R,'Eighi'
        
        #me&tsc,"Eighi:"+ki(Rs&twmt,2)
    },'ift,D'],
    
    # loads, small list of potential Stori
    #  could be in each A.4 (W:Lingo) Stories,
    #   outsphere of Story/Stories
    #  since Stories%eph we must store our list
    ['Stori+Around',0.298,&acgtRs{
        me&reaw,R,'Around'
        me&scroll,10
        me&tsc,"Arou"
        ah(R,'noadhere','director',1)
        # does its own %eto,tw
        ah(R,'noadhere','twmt',1)
        ah(R,'adhere','twmt',s)
        Rs&fully = 1
    },'ift,D'],
 
 // %The/Test/Nine/Eigh pos
  
  // 1 %TheTest o Stori
    ['The',0.292,&acgtRs{
        me&reaw,R,'The'
        me&inode,R
        ah(R,'inheritscif','ball','TheTest',1)
        # init The/$t/$t
        #  which %%Nine -> Plot, then <-> eight
        me&fiu,s,'vv'
    },'ift,D'],
    # -nine being Zavable
    ['TheTest',0.294,&acgtRs{
        me&reaw,R,'TheTest'
        Rs&acceptables = 1
        $go = me&acting,R,'That'
        $x = me&Jx,R;
        # wants to get Stories/$t(/$bits)
        #  and commit them all at once, with history
        #  and commit $t -> Stories/Around
        $that = me&getThat,R,xs&Stories,s.t
        !that and return
        # then harness %Live into TheNine
        # < harness self (TheNine<->...) <-> other (Paving)
        $self = me&selfThat,R,that
        # < a Stori could compose many Stori,
        #    a Stori = plot - subplots
        #     subplots pointed to, recipised to solo:
        #      being vague about -nodes,
        #      templating the test data for inputs from Stori,
        #      from Zif noticing only $t, $begin|end_dige change
        $r = me&bal,s.t,self,'TheNine,eph'
        rc&s != self and me&nu,"Craze",rc&s
    },'ift,D'],
       
  // 3  %TheNine <-> Yingates
    # Nine/$exp + Story/-eight%Yingates
    #  = Nine/Eigh%exp+%got
    ['TheNine',0.295,&acgtRs{
        me&reaw,R,'TheNine,bal_tw_s'
        Rs&noRsync = 1
        Rs&acceptables = 1
        $go = me&acting,R,'Nine'
        $x = me&Jx,R;
        if (go) {
            $showexp = x.ro('showexp',{})
        }
        sc&pi = 'nine'
        # roll the invention of Eigh s
        me&sleepic,R and me&rollbs,R,'bal_tw_s'; return
        
        # $Nine cloned from a Stories/Stori
        # $Nine/* become Eigh%exp (have %dige, instructions)
        # these eight -> Eigh%got (have %dige%string, y&Point=$L)
        # < %%Having,eight come in order?
        $N = me&jaa,R,"eight,Having,L",1
        
        me&twlic,N,s (&zlct{
            $r = me&bal,t,'eph'
            # &twlim match styles:
            #  starts with everything trailing,surprise
            #  may +%now_missing once later $eight are found
            ex(r.sc,c)
            #me&tsc,"Ergo:"+t+(ki(c)) .sc.dis = 1
            
            rs&TheEigh = 1
            l and rs&exp = l
            z and rs&got = z
            
            if (showexp) {
                if (l) {
                    $re = me&bal,t+"@exp",l,'eph'
                    res&title = '@exp'
                    res&EighExp = rc&s
                }
                else {
                    x.ro("fillinblank")
                    # usu would manual check, accept
                }
            }
        })
    },'ift,D'],
    # next to TheEigh
    ['EighExp',0.32,&acgtRs{
        me&reaw,R,'EighExp,title'
        s&bgh = '000'
    },'ift,D'],
    
    # many acceptables
    ['acceptables',0.295,&acgtRs{
        me&reaw,R,'acceptables,reself'
        me&rollbs,R,'reself'
    },'ift,D'],
    ['TheNine',0.67,&acgtRs{
        $N = me&ioty,R,'TheEigh'
        # -nine settles the -eights, see &sleepic
        # < create new &settles and go to sleep
        #me&settle,R,N && me&sleepic,R,2 and return
        me&acceptables,R,N
        $c = {
            # an Eigh accepted again
            accept: &acgtsOrznt{
                me&accept,R,t
                $dige = me&storable,t
                # Stories/$t links /$eight
                $link = me&fiu,O,t.t,2
                linkc&pi = 'eight'
                links&dige = dige
            },
            # an Eigh still
            sleep: &acgtsOrz{
                $t = rs&exp
                !t and return
                # Stories/$t links /$eight
                # < should be as it was, skip encode?
                me&fiu,O,Cye(t),2
            },
            # the Nine itself
            self: &acgtsO{
                me&Linets,s,O
                me&accept,R,s
            }
        }
        me&acceptables_reself,R,N,c
        
    },'ift,D'],
  
  // 6  %TheEigh 
    ['TheEigh',0.33,&acgtRs{
        me&reaw,R,'TheEigh,exp,got,now_missing'
        $x = me&Jx,R;
        $go = me&acting,R,'Eigh'
        $t = Rs&exp
        $z = Rs&got
        # z-eight is already Lineso:
        $Dige = z && zs&dige
        $cha = !Dige || !me&za,R,{Dige}
        Dige and me&ha,R,{Dige}
        !cha && me&sleepic,R and return
        if (go) {
            me&zu,"TheEigh",s
            me&zu,"Exp",t
            me&zu,"Got",z
        }
        ss&coun ||= 0
        ss&coun++
    },'ift,D'],
    ['TheEigh',0.36,&acgtRs{
        
        $t = Rs&exp
        $z = Rs&got
        
        # has -eight happened (got got)
        !z || !zs&dige || !zs&string and return me&ha,R,'unready'
        # < exp ||= surprise?
        
        # from here, it's a &toPave that doesn't pushPave at the end,
        #  instead sending the flock of storables onward
        me&acceptable,R,z,t
        
        # < probably want Qdiff,z,t=null
        #    or know t is a link, do &moreThat
        #    or t could be this step's part of another &Linets
        #     and need to other it there and then commit that,
        #      staging chunk regroup for commit essential
        #     lots of slightly different %%$word...,
        #      iterating commissions on 
        me&ja,R,'ok' and return
        !t and return
        !(tc&pi && ts&dige) and return me&tsc,"Nine/!-eight"
        
        $self = me&moreThat,R,t,t
        !self and return me&waits,"Nine/.."
        
        $Q = me&PaveQ,R,selfy&That
        
        me&Qdiff,R,z,Q
        # < to &brackology
        # < mergible
    },'ift,D'],
  
  // 7 %TheTest reselfs %ReNine <- %TheNine
    # < i $t... ytia o %%acceptia:t
    ['TheTest',0.294,&acgtRs{
        $h = {
            ytag: 'tia',
            self: &acgtnt{
                $r = me&bal,"Re:"+t.t,'ReNine,unity,eph'
                $z = rc&s
                return z
            },
            other: &acgtntzlm{
                return me&fiu,z,l.t
            },
        }
        me&acceptables_reother,R,h
    },'ift,D'],
    ['ReNine',0.295,&acgtRs{
        me&reaw,R,'ReNine,unity'
        ah(R,'inheritscif','ball','ReNine',1)
    },'ift,D'],
    ['ReNine+unity',0.35,&acgtRs{
        $N = me&ioty,R,'ReNine'
        s&bg = '#180213'
        me&toPaves,R,[R,...N]
    },'ift,D'],
    
    ['ReNine',0.33,&acgtRs{
        $go = me&acting,R,'Re'
        $x = me&Jx,R;
        # the got, being pushed
        $tia = sy&tia
        # into the enclosing Stories or /Stori**
        # < because pipe can go back through Nine &reother,
        #    and Test/Eigh &reself, to 
        $t = me&twineThat,R,tia,{origin:xs&Stories}
        # difference and flock apply again
        # < ReNine species
        t and me&toPave,R,R,t,tia

        go and me&nu,"tia",tia
        !t and return
        $r = ty&R
        $Q = rs&Q;
        if (go) {
            me&nu,"Q",Q
            me&nu,"P",Qs&P
        }
    },'ift,D'],
 
 // This%Storystream/$eight
    ['theThis',0.293,&acgtRs{
        me&reaw,R,'theThis,wakeful,onlyish'
        me&inode,R
        # wake R when p%onlyish/R%wakeful
        Rs&wakeful = 1
        # sleep r when R%onlyish/r!%wakeful
        Rs&onlyish = 1
        if (0) {
            # shows sleep|wake pattern
            $p = Ry&up
            ah(R,'inheritscif','ball','theThis',1)
            $i = ss&quue = (ss&quue||0) + 1
            !ps&theThis and me&input,R,"le_"+i
            else {
                ps&z.slice(-2).includes(R) and Rs&wakeful = 1
            }
            return
        }
        $Ying = me.cbu(R,'Ying')
        $c = {s:Yings&Outlog}
        me&Storystream,R,s,c
    },'ift,D'],
    ['theThis',0.296,&acgtRs{
        $D = Rs&Storystream
        $x = me&Jx,R
        
        # draw the story
        # < selfing it to -seven and -eight already,
        #    realising novelty asap
        each im Ds&z {
            mc&pi ||= 'eight'
            # %onlyish 294 has made these if sleeping them
            $r = me&bal,m.t,m,'Yingates,Fin,eph'
            rc&s != m and throw 'crae'
        }
        # leaves current -gate
        r and rs&wakeful = delete rs&Fin
    },'ift,D'],
        
   // Storystream[Page] <- Outlog
    &{
    me.Storystream = &acgtRsc{
        $x = me&Jx,R
        me&reaw,R,'Storystream'
        me&rollbs,R,'Storystream'
        $D =
        # < it having a Y to consider, slepvia
        sy&Storystream =
        Rs&Storystream ||= me&logdome,R,s
        !c.s and throw "thing to follow"
        Dc&thing = c.s
        Dc&ignoring = x.ro('pause',{})
        
        # page turning
        # may be unturned, see merge similar previous
        # < turn fractions of a page|plot, when|why
        $Plot = xs&Plot
        # may have no plot, autopause if %Page > 2
        !Plot and Plot = s
        $page_turning = &c{
            # othery before turn
            $cb = Ploty&Pageturning
            cb and $t = cb(R,D)
            !t and throw "page!name"
            
            # close
            Dy&domed(c)
            # open
            Dy&dome(t,'light')
            
            # othery &Plot_Pageturn
            $cb = Ploty&Pageturn
            cb and cb(R,D)
            
            $i = Ds&z.length
            !cb && i > 2 and Rs&pause = 1
            i > 9 and Rs&pause = 1; ss&overturning = 1
            # < Plot leaves tightenable hooks
            #   for Yingate_2 -> Outlog -> next:
        }
        # even if too close to the last quiet,wake to self
        $Y = me.cbu(R,'Ying').sc.Ying
        Ys&quiet_wakers_too_recently = &{
            ~>4 pagequiet: Plots&Page
            $y = Ploty&Pageturnable
            # can sometimes want to happen:
            #  must self to act first in the next Page
            #   < supposing multiple layers of quiet_wakers
            y && y () and return 1
            page_turning()
        }
        
        # takes over from Story
        $q = me&quiet_waker,R
        q ||= !sy&quue
        sy&quue = 1
        if (q) {
            me&tsc,"q";
            #~>4 quiet,wake: s.t
            # tailwag so -eights end in %%quiet(_recently,wake)
            page_turning({tailwag:1})
        }
        # then inhaling nothing if the page was just turned ^
        Dy&stream()
    }
    },
    # when e,on:m%Yingates, it keeps filling up
    ['sleeping+Storystream',0.53,&acgtRs{
        $D = Rs&Storystream
        # < want to have a sleeping This just for this
        #    more often than waiting til quiet
        #   moment to picture things before they ~ again
        Dy&stream()
    },'ift,D'],
 
 // $eight %Yingates details
   
   // This/$eight/*%Yingate
    ['Yingates',0.298,&acgtRs{
        me&reaw,R,'Yingates,wakeful,who,Fin'
        me&inode,R
        Rs&rowish = 1
        # * become %Yingate!%ball
        Rs&noRsync = 1
        each in ss&z {
            $r = me&Ret,R,{t:"n:"+i,s:n,Yingate:1}
        }
    },'ift,D'],
   
   // -seven -> &brackology
    # < self a -seven
    #   has a &brackology + more
    # < brackology rearranging so node:Gilramp=wake
    # < saying when node:Travel..Gilramp
    ['Yingate',0.32,&acgtRs{
        sy&R = R
        $p = Ry&up
        $z = pc&s
        
        sc&pi ||= 'ugh'
        s&hue = 138
        sc&pi != 'gate' and s&ml = -2; s&hue = 100
        
        # have serials now interspersed
        # < notice c&i per c&pi?
        sc&i != null &&
            n Dci 01 $s:sc&i %fs:8
        # may be  (Dc&i per Dc&pi?)
        $zi = zs&z.indexOf(s)
        
        me&piseven,R,s,{t:zi,D:s}
    },'ift,D'],
    
    # < othering back into &brackology any novelty
    ['Yingate',0.44,&acgtRs{
        me&reaw,R,'Yingate'
        Rs&rowish = 1
        !sy&seven and return
        $x = me&Jx,R;
        $go = me&acting,R,'-seven',0
        
    },'ift,D'],
   
   // -eight/-seven 
    # -eight collects -four,-seven+
    #  -seven selfs &brackology
    #   < slep
    # other it/them to:
    #  c.expect: Nine/$t
    #   < chunk difference
    #  c.nlist: official nodes
    #   -n can tpath relative to their name
    # < see Atiming of R,R/*, adjust cv for less rounds
    ['Yingates+Fin',0.33,&acgtRs{
        me&bewind,R and return
        Rs&fixatfour = 1
        $x = me&Jx,R;
        $go = me&acting,R,'-eight',0
        # page of story: -eight a %Yingates
        $c = {ov:0.4}
        $Ch = me&jaa,R,'Checkable,efrom' [0]
        !Ch and me&tsc,"..Checkable"
        else {
            c.ov = 0.9
            # have name pile
            $No = xs&Nodar
            $X = Noy&X
            c.nlist = X.ss
            # Nine/$t instrunction
            $z = Chs&expect
            z and c.expect = z
            go and me&zu,"exp",z
            # send results
            c.Finto = Chs&efrom
        }
        me&pieight,R,s,c
       # ^ does %%Fin:s -> Eigh
    },'ift,D'],
   
 
]}